{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  return useCallback((response, {\n    summary,\n    approval\n  } = {}) => {\n    if (!account) return;\n    if (!chainId) return;\n    const {\n      hash\n    } = response;\n\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary\n    }));\n  }, [dispatch, chainId, account]);\n} // returns all the transactions for the current chain\n\nexport function useAllTransactions() {\n  var _state$chainId;\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const state = useSelector(state => state.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\nexport function useIsTransactionPending(transactionHash) {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n} // returns whether a token has a pending approval transaction\n\nexport function useHasPendingApproval(tokenAddress, spender) {\n  const allTransactions = useAllTransactions();\n  return useMemo(() => typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    var _allTransactions$hash;\n\n    if ((_allTransactions$hash = allTransactions[hash]) === null || _allTransactions$hash === void 0 ? void 0 : _allTransactions$hash.receipt) {\n      return false;\n    } else {\n      var _allTransactions$hash2, _allTransactions$hash3, _allTransactions$hash4, _allTransactions$hash5;\n\n      return ((_allTransactions$hash2 = allTransactions[hash]) === null || _allTransactions$hash2 === void 0 ? void 0 : (_allTransactions$hash3 = _allTransactions$hash2.approval) === null || _allTransactions$hash3 === void 0 ? void 0 : _allTransactions$hash3.tokenAddress) === tokenAddress && ((_allTransactions$hash4 = allTransactions[hash]) === null || _allTransactions$hash4 === void 0 ? void 0 : (_allTransactions$hash5 = _allTransactions$hash4.approval) === null || _allTransactions$hash5 === void 0 ? void 0 : _allTransactions$hash5.spender) === spender;\n    }\n  }), [allTransactions, spender, tokenAddress]);\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/transactions/hooks.tsx"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","hash","Error","from","useAllTransactions","state","transactions","useIsTransactionPending","transactionHash","receipt","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some"],"mappings":"AACA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,SAASC,cAAT,QAA+B,WAA/B;AAGA;AACA,OAAO,SAASC,mBAAT,GAGG;AACR,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBJ,kBAAkB,EAA/C;AACA,QAAMK,QAAQ,GAAGP,WAAW,EAA5B;AAEA,SAAOF,WAAW,CAChB,CACEU,QADF,EAEE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoG,EAFtG,KAGK;AACH,QAAI,CAACJ,OAAL,EAAc;AACd,QAAI,CAACD,OAAL,EAAc;AAEd,UAAM;AAAEM,MAAAA;AAAF,QAAWH,QAAjB;;AACA,QAAI,CAACG,IAAL,EAAW;AACT,YAAMC,KAAK,CAAC,4BAAD,CAAX;AACD;;AACDL,IAAAA,QAAQ,CAACJ,cAAc,CAAC;AAAEQ,MAAAA,IAAF;AAAQE,MAAAA,IAAI,EAAEP,OAAd;AAAuBD,MAAAA,OAAvB;AAAgCK,MAAAA,QAAhC;AAA0CD,MAAAA;AAA1C,KAAD,CAAf,CAAR;AACD,GAbe,EAchB,CAACF,QAAD,EAAWF,OAAX,EAAoBC,OAApB,CAdgB,CAAlB;AAgBD,C,CAED;;AACA,OAAO,SAASQ,kBAAT,GAAwE;AAAA;;AAC7E,QAAM;AAAET,IAAAA;AAAF,MAAcH,kBAAkB,EAAtC;AAEA,QAAMa,KAAK,GAAGd,WAAW,CAAqCc,KAAK,IAAIA,KAAK,CAACC,YAApD,CAAzB;AAEA,SAAOX,OAAO,qBAAGU,KAAK,CAACV,OAAD,CAAR,2DAAqB,EAArB,GAA0B,EAAxC;AACD;AAED,OAAO,SAASY,uBAAT,CAAiCC,eAAjC,EAAoE;AACzE,QAAMF,YAAY,GAAGF,kBAAkB,EAAvC;AAEA,MAAI,CAACI,eAAD,IAAoB,CAACF,YAAY,CAACE,eAAD,CAArC,EAAwD,OAAO,KAAP;AAExD,SAAO,CAACF,YAAY,CAACE,eAAD,CAAZ,CAA8BC,OAAtC;AACD,C,CAED;;AACA,OAAO,SAASC,qBAAT,CAA+BC,YAA/B,EAAiEC,OAAjE,EAAuG;AAC5G,QAAMC,eAAe,GAAGT,kBAAkB,EAA1C;AACA,SAAOf,OAAO,CACZ,MACE,OAAOsB,YAAP,KAAwB,QAAxB,IACA,OAAOC,OAAP,KAAmB,QADnB,IAEAE,MAAM,CAACC,IAAP,CAAYF,eAAZ,EAA6BG,IAA7B,CAAkCf,IAAI,IAAI;AAAA;;AACxC,iCAAIY,eAAe,CAACZ,IAAD,CAAnB,0DAAI,sBAAuBQ,OAA3B,EAAoC;AAClC,aAAO,KAAP;AACD,KAFD,MAEO;AAAA;;AACL,aACE,2BAAAI,eAAe,CAACZ,IAAD,CAAf,4GAAuBD,QAAvB,kFAAiCW,YAAjC,MAAkDA,YAAlD,IACA,2BAAAE,eAAe,CAACZ,IAAD,CAAf,4GAAuBD,QAAvB,kFAAiCY,OAAjC,MAA6CA,OAF/C;AAID;AACF,GATD,CAJU,EAcZ,CAACC,eAAD,EAAkBD,OAAlB,EAA2BD,YAA3B,CAdY,CAAd;AAgBD","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        if (allTransactions[hash]?.receipt) {\n          return false\n        } else {\n          return (\n            allTransactions[hash]?.approval?.tokenAddress === tokenAddress &&\n            allTransactions[hash]?.approval?.spender === spender\n          )\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}