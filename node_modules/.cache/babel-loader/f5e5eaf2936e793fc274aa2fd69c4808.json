{"ast":null,"code":"var _jsxFileName = \"/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/pages/Swap/index.tsx\";\nimport { JSBI } from '@bscswap/sdk';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport ReactGA from 'react-ga';\nimport { Text } from 'rebass';\nimport { useTranslation } from 'react-i18next';\nimport { ThemeContext } from 'styled-components';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button';\nimport Card, { GreyCard } from '../../components/Card';\nimport { AutoColumn } from '../../components/Column';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport { AutoRow, RowBetween } from '../../components/Row';\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown';\nimport BetterTradeLink from '../../components/swap/BetterTradeLink';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport { ArrowWrapper, BottomGrouping, Dots, SwapCallbackError, Wrapper } from '../../components/swap/styleds';\nimport TradePrice from '../../components/swap/TradePrice';\nimport { TokenWarningCards } from '../../components/TokenWarningCard';\nimport { BETTER_TRADE_LINK_THRESHOLD, INITIAL_ALLOWED_SLIPPAGE } from '../../constants';\nimport { getTradeVersion, isTradeBetter } from '../../data/V1';\nimport { useActiveWeb3React } from '../../hooks';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport { useSwapCallback } from '../../hooks/useSwapCallback';\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useTokenWarningDismissal, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { LinkStyledButton, TYPE } from '../../theme';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport AppBody from '../AppBody';\nimport { ClickableText } from '../Pool/styleds';\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP;\n\n  useDefaultsFromURLSearch();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [deadline] = useUserDeadline();\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap ? undefined : {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  }[toggledVersion];\n  const betterTradeLinkVersion = toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD) ? Version.v1 : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade) ? Version.v2 : undefined;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, deadline, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, getTradeVersion(trade)].join('/')\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const [dismissedToken0] = useTokenWarningDismissal(chainId, currencies[Field.INPUT]);\n  const [dismissedToken1] = useTokenWarningDismissal(chainId, currencies[Field.OUTPUT]);\n  const showWarning = !dismissedToken0 && !!currencies[Field.INPUT] || !dismissedToken1 && !!currencies[Field.OUTPUT];\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, showWarning && /*#__PURE__*/React.createElement(TokenWarningCards, {\n    currencies: currencies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(AppBody, {\n    disabled: showWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwapPoolTabs, {\n    active: 'swap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    id: \"swap-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmSwapModal, {\n    isOpen: showConfirm,\n    trade: trade,\n    originalTrade: tradeToConfirm,\n    onAcceptChanges: handleAcceptChanges,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    recipient: recipient,\n    allowedSlippage: allowedSlippage,\n    onConfirm: handleSwap,\n    swapErrorMessage: swapErrorMessage,\n    onDismiss: handleConfirmDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: 'md',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap ? t('fromestimated') : t('fromCapitalized'),\n    value: formattedAmounts[Field.INPUT],\n    showMaxButton: !atMaxAmountInput,\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: () => {\n      maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n    },\n    onCurrencySelect: currency => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n      onCurrencySelection(Field.INPUT, currency);\n    },\n    otherCurrency: currencies[Field.OUTPUT],\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: \"space-between\",\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    onClick: () => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n      onSwitchTokens();\n    },\n    color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 19\n    }\n  })), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"add-recipient-button\",\n    onClick: () => onChangeRecipient(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 19\n    }\n  }, \"+ Add a send (optional)\") : null)), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: formattedAmounts[Field.OUTPUT],\n    onUserInput: handleTypeOutput,\n    label: independentField === Field.INPUT && !showWrap ? t('toestimated') : t('toCapitalized'),\n    showMaxButton: false,\n    currency: currencies[Field.OUTPUT],\n    onCurrencySelect: address => onCurrencySelection(Field.OUTPUT, address),\n    otherCurrency: currencies[Field.INPUT],\n    id: \"swap-currency-output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }), recipient !== null && !showWrap ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: \"space-between\",\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"remove-recipient-button\",\n    onClick: () => onChangeRecipient(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 19\n    }\n  }, \"- Remove send\")), /*#__PURE__*/React.createElement(AddressInputPanel, {\n    id: \"recipient\",\n    value: recipient,\n    onChange: onChangeRecipient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  })) : null, showWrap ? null : /*#__PURE__*/React.createElement(Card, {\n    padding: '.25rem .75rem 0 .75rem',\n    borderRadius: '20px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 21\n    }\n  }, t('price')), /*#__PURE__*/React.createElement(TradePrice, {\n    inputCurrency: currencies[Field.INPUT],\n    outputCurrency: currencies[Field.OUTPUT],\n    price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n    showInverted: showInverted,\n    setShowInverted: setShowInverted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  })), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 23\n    }\n  }, \"Slippage Tolerance\"), /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 23\n    }\n  }, allowedSlippage ? allowedSlippage / 100 : '-', \"%\"))))), /*#__PURE__*/React.createElement(BottomGrouping, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }\n  }, !account ? /*#__PURE__*/React.createElement(ButtonLight, {\n    onClick: toggleWalletModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 15\n    }\n  }, t('connectWallet')) : showWrap ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: Boolean(wrapInputError),\n    onClick: onWrap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 15\n    }\n  }, wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/React.createElement(GreyCard, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 17\n    }\n  }, t('insufficientLiquidityForThisTrade'))) : showApproveFlow ? /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonPrimary, {\n    onClick: approveCallback,\n    disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n    width: \"48%\",\n    altDisbaledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }\n  }, approval === ApprovalState.PENDING ? /*#__PURE__*/React.createElement(Dots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 21\n    }\n  }, \"Approving\") : approvalSubmitted && approval === ApprovalState.APPROVED ? 'Approved' : 'Approve ' + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)), /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    width: \"48%\",\n    id: \"swap-button\",\n    disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n    error: isValid && priceImpactSeverity > 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 19\n    }\n  }, priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`))) : /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    id: \"swap-button\",\n    disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n    error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 20,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 17\n    }\n  }, swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)), isExpertMode && swapErrorMessage ? /*#__PURE__*/React.createElement(SwapCallbackError, {\n    error: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 49\n    }\n  }) : null, betterTradeLinkVersion && /*#__PURE__*/React.createElement(BetterTradeLink, {\n    version: betterTradeLinkVersion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 40\n    }\n  })))), /*#__PURE__*/React.createElement(AdvancedSwapDetailsDropdown, {\n    trade: trade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/pages/Swap/index.tsx"],"names":["JSBI","React","useCallback","useContext","useEffect","useState","ArrowDown","ReactGA","Text","useTranslation","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonPrimary","Card","GreyCard","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","BetterTradeLink","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","Dots","SwapCallbackError","Wrapper","TradePrice","TokenWarningCards","BETTER_TRADE_LINK_THRESHOLD","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","isTradeBetter","useActiveWeb3React","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useSwapCallback","useToggledVersion","Version","useWrapCallback","WrapType","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useTokenWarningDismissal","useUserDeadline","useUserSlippageTolerance","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Swap","t","account","chainId","theme","toggleWalletModal","toggleSettings","isExpertMode","deadline","allowedSlippage","independentField","typedValue","recipient","v1Trade","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","address","recipientAddress","toggledVersion","trade","undefined","v1","v2","betterTradeLinkVersion","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","dismissedToken0","dismissedToken1","showWarning","handleConfirmDismiss","handleAcceptChanges","padding","primary1","text2","executionPrice","WRAP","UNWRAP","textAlign"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Trade } from '@bscswap/sdk'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { useTranslation } from 'react-i18next'\nimport { ThemeContext } from 'styled-components'\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport BetterTradeLink from '../../components/swap/BetterTradeLink'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, Dots, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\nimport TradePrice from '../../components/swap/TradePrice'\nimport { TokenWarningCards } from '../../components/TokenWarningCard'\n\nimport { BETTER_TRADE_LINK_THRESHOLD, INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { getTradeVersion, isTradeBetter } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport useENSAddress from '../../hooks/useENSAddress'\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState\n} from '../../state/swap/hooks'\nimport {\n  useExpertModeManager,\n  useTokenWarningDismissal,\n  useUserDeadline,\n  useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\n\nexport default function Swap() {\n  useDefaultsFromURLSearch()\n  const { t } = useTranslation()\n\n  const { account, chainId } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu()\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [deadline] = useUserDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo()\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  )\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const { address: recipientAddress } = useENSAddress(recipient)\n  const toggledVersion = useToggledVersion()\n  const trade = showWrap\n    ? undefined\n    : {\n        [Version.v1]: v1Trade,\n        [Version.v2]: v2Trade\n      }[toggledVersion]\n\n  const betterTradeLinkVersion: Version | undefined =\n    toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD)\n      ? Version.v1\n      : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n      ? Version.v2\n      : undefined\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    deadline,\n    recipient\n  )\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then(hash => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n\n        ReactGA.event({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [\n            trade?.inputAmount?.currency?.symbol,\n            trade?.outputAmount?.currency?.symbol,\n            getTradeVersion(trade)\n          ].join('/')\n        })\n      })\n      .catch(error => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined\n        })\n      })\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const [dismissedToken0] = useTokenWarningDismissal(chainId, currencies[Field.INPUT])\n  const [dismissedToken1] = useTokenWarningDismissal(chainId, currencies[Field.OUTPUT])\n  const showWarning =\n    (!dismissedToken0 && !!currencies[Field.INPUT]) || (!dismissedToken1 && !!currencies[Field.OUTPUT])\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  return (\n    <>\n      {showWarning && <TokenWarningCards currencies={currencies} />}\n      <AppBody disabled={showWarning}>\n        <SwapPoolTabs active={'swap'} />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={'md'}>\n            <CurrencyInputPanel\n              label={independentField === Field.OUTPUT && !showWrap ? t('fromestimated') : t('fromCapitalized')}\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={() => {\n                maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n              }}\n              onCurrencySelect={currency => {\n                setApprovalSubmitted(false) // reset 2 step UI for approvals\n                onCurrencySelection(Field.INPUT, currency)\n              }}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n\n            <AutoColumn justify=\"space-between\">\n              <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\n                      onSwitchTokens()\n                    }}\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT && !showWrap ? t('toestimated') : t('toCapitalized')}\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={address => onCurrencySelection(Field.OUTPUT, address)}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null && !showWrap ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n\n            {showWrap ? null : (\n              <Card padding={'.25rem .75rem 0 .75rem'} borderRadius={'20px'}>\n                <AutoColumn gap=\"4px\">\n                  <RowBetween align=\"center\">\n                    <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                      {t('price')}\n                    </Text>\n                    <TradePrice\n                      inputCurrency={currencies[Field.INPUT]}\n                      outputCurrency={currencies[Field.OUTPUT]}\n                      price={trade?.executionPrice}\n                      showInverted={showInverted}\n                      setShowInverted={setShowInverted}\n                    />\n                  </RowBetween>\n\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        {allowedSlippage ? allowedSlippage / 100 : '-'}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>{t('connectWallet')}</ButtonLight>\n            ) : showWrap ? (\n              <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap}>\n                {wrapInputError ??\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n              </ButtonPrimary>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: 'center' }}>\n                <TYPE.main mb=\"4px\">{t('insufficientLiquidityForThisTrade')}</TYPE.main>\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonPrimary\n                  onClick={approveCallback}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                  width=\"48%\"\n                  altDisbaledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>Approving</Dots>\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                    'Approved'\n                  ) : (\n                    'Approve ' + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonPrimary>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined\n                      })\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap()\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    })\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                </Text>\n              </ButtonError>\n            )}\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n            {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      <AdvancedSwapDetailsDropdown trade={trade} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}