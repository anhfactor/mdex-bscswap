{"ast":null,"code":"import { Pair, Token } from '@bscswap/sdk';\nimport flatMap from 'lodash.flatmap';\nimport { useCallback, useMemo } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../constants';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAllTokens } from '../../hooks/Tokens';\nimport { addSerializedPair, addSerializedToken, dismissTokenWarning, removeSerializedToken, updateUserDarkMode, updateUserDeadline, updateUserExpertMode, updateUserSlippageTolerance } from './actions';\nimport { useDefaultTokenList } from '../lists/hooks';\nimport { isDefaultToken } from '../../utils';\n\nfunction serializeToken(token) {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  };\n}\n\nfunction deserializeToken(serializedToken) {\n  return new Token(serializedToken.chainId, serializedToken.address, serializedToken.decimals, serializedToken.symbol, serializedToken.name);\n}\n\nexport function useIsDarkMode() {\n  const {\n    userDarkMode,\n    matchesDarkMode\n  } = useSelector(({\n    user: {\n      matchesDarkMode,\n      userDarkMode\n    }\n  }) => ({\n    userDarkMode,\n    matchesDarkMode\n  }), shallowEqual);\n  return userDarkMode === null ? matchesDarkMode : userDarkMode;\n}\nexport function useDarkModeManager() {\n  const dispatch = useDispatch();\n  const darkMode = useIsDarkMode();\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({\n      userDarkMode: !darkMode\n    }));\n  }, [darkMode, dispatch]);\n  return [darkMode, toggleSetDarkMode];\n}\nexport function useIsExpertMode() {\n  return useSelector(state => state.user.userExpertMode);\n}\nexport function useExpertModeManager() {\n  const dispatch = useDispatch();\n  const expertMode = useIsExpertMode();\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({\n      userExpertMode: !expertMode\n    }));\n  }, [expertMode, dispatch]);\n  return [expertMode, toggleSetExpertMode];\n}\nexport function useUserSlippageTolerance() {\n  const dispatch = useDispatch();\n  const userSlippageTolerance = useSelector(state => {\n    return state.user.userSlippageTolerance;\n  });\n  const setUserSlippageTolerance = useCallback(userSlippageTolerance => {\n    dispatch(updateUserSlippageTolerance({\n      userSlippageTolerance\n    }));\n  }, [dispatch]);\n  return [userSlippageTolerance, setUserSlippageTolerance];\n}\nexport function useUserDeadline() {\n  const dispatch = useDispatch();\n  const userDeadline = useSelector(state => {\n    return state.user.userDeadline;\n  });\n  const setUserDeadline = useCallback(userDeadline => {\n    dispatch(updateUserDeadline({\n      userDeadline\n    }));\n  }, [dispatch]);\n  return [userDeadline, setUserDeadline];\n}\nexport function useAddUserToken() {\n  const dispatch = useDispatch();\n  return useCallback(token => {\n    dispatch(addSerializedToken({\n      serializedToken: serializeToken(token)\n    }));\n  }, [dispatch]);\n}\nexport function useRemoveUserAddedToken() {\n  const dispatch = useDispatch();\n  return useCallback((chainId, address) => {\n    dispatch(removeSerializedToken({\n      chainId,\n      address\n    }));\n  }, [dispatch]);\n}\nexport function useUserAddedTokens() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const serializedTokensMap = useSelector(({\n    user: {\n      tokens\n    }\n  }) => tokens);\n  return useMemo(() => {\n    var _serializedTokensMap;\n\n    if (!chainId) return [];\n    return Object.values((_serializedTokensMap = serializedTokensMap[chainId]) !== null && _serializedTokensMap !== void 0 ? _serializedTokensMap : {}).map(deserializeToken);\n  }, [serializedTokensMap, chainId]);\n}\n\nfunction serializePair(pair) {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1)\n  };\n}\n\nexport function usePairAdder() {\n  const dispatch = useDispatch();\n  return useCallback(pair => {\n    dispatch(addSerializedPair({\n      serializedPair: serializePair(pair)\n    }));\n  }, [dispatch]);\n}\n/**\n * Returns whether a token warning has been dismissed and a callback to dismiss it,\n * iff it has not already been dismissed and is a valid token.\n */\n\nexport function useTokenWarningDismissal(chainId, token) {\n  const dismissalState = useSelector(state => state.user.dismissedTokenWarnings);\n  const dispatch = useDispatch(); // get default list, mark as dismissed if on list\n\n  const defaultList = useDefaultTokenList();\n  const isDefault = isDefaultToken(defaultList, token);\n  return useMemo(() => {\n    var _dismissalState$chain;\n\n    if (!chainId || !token) return [false, null];\n    const dismissed = token instanceof Token ? (dismissalState === null || dismissalState === void 0 ? void 0 : (_dismissalState$chain = dismissalState[chainId]) === null || _dismissalState$chain === void 0 ? void 0 : _dismissalState$chain[token.address]) === true || isDefault : true;\n    const callback = dismissed || !(token instanceof Token) ? null : () => dispatch(dismissTokenWarning({\n      chainId,\n      tokenAddress: token.address\n    }));\n    return [dismissed, callback];\n  }, [chainId, token, dismissalState, isDefault, dispatch]);\n}\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\n\nexport function toV2LiquidityToken([tokenA, tokenB]) {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'BLP', 'BSCswap LP Token');\n}\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\n\nexport function useTrackedTokenPairs() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useAllTokens(); // pinned pairs\n\n  const pinnedPairs = useMemo(() => {\n    var _PINNED_PAIRS$chainId;\n\n    return chainId ? (_PINNED_PAIRS$chainId = PINNED_PAIRS[chainId]) !== null && _PINNED_PAIRS$chainId !== void 0 ? _PINNED_PAIRS$chainId : [] : [];\n  }, [chainId]); // pairs for every token against every base\n\n  const generatedPairs = useMemo(() => chainId ? flatMap(Object.keys(tokens), tokenAddress => {\n    var _BASES_TO_TRACK_LIQUI;\n\n    const token = tokens[tokenAddress]; // for each token on the current chain,\n\n    return (// loop though all bases on the current chain\n      ((_BASES_TO_TRACK_LIQUI = BASES_TO_TRACK_LIQUIDITY_FOR[chainId]) !== null && _BASES_TO_TRACK_LIQUI !== void 0 ? _BASES_TO_TRACK_LIQUI : []). // to construct pairs of the given token with each base\n      map(base => {\n        if (base.address === token.address) {\n          return null;\n        } else {\n          return [base, token];\n        }\n      }).filter(p => p !== null)\n    );\n  }) : [], [tokens, chainId]); // pairs saved by users\n\n  const savedSerializedPairs = useSelector(({\n    user: {\n      pairs\n    }\n  }) => pairs);\n  const userPairs = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return [];\n    const forChain = savedSerializedPairs[chainId];\n    if (!forChain) return [];\n    return Object.keys(forChain).map(pairId => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)];\n    });\n  }, [savedSerializedPairs, chainId]);\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [generatedPairs, pinnedPairs, userPairs]);\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB);\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`;\n      if (memo[key]) return memo;\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\n      return memo;\n    }, {});\n    return Object.keys(keyed).map(key => keyed[key]);\n  }, [combinedList]);\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/user/hooks.tsx"],"names":["Pair","Token","flatMap","useCallback","useMemo","shallowEqual","useDispatch","useSelector","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","useActiveWeb3React","useAllTokens","addSerializedPair","addSerializedToken","dismissTokenWarning","removeSerializedToken","updateUserDarkMode","updateUserDeadline","updateUserExpertMode","updateUserSlippageTolerance","useDefaultTokenList","isDefaultToken","serializeToken","token","chainId","address","decimals","symbol","name","deserializeToken","serializedToken","useIsDarkMode","userDarkMode","matchesDarkMode","user","useDarkModeManager","dispatch","darkMode","toggleSetDarkMode","useIsExpertMode","state","userExpertMode","useExpertModeManager","expertMode","toggleSetExpertMode","useUserSlippageTolerance","userSlippageTolerance","setUserSlippageTolerance","useUserDeadline","userDeadline","setUserDeadline","useAddUserToken","useRemoveUserAddedToken","useUserAddedTokens","serializedTokensMap","tokens","Object","values","map","serializePair","pair","token0","token1","usePairAdder","serializedPair","useTokenWarningDismissal","dismissalState","dismissedTokenWarnings","defaultList","isDefault","dismissed","callback","tokenAddress","toV2LiquidityToken","tokenA","tokenB","getAddress","useTrackedTokenPairs","pinnedPairs","generatedPairs","keys","base","filter","p","savedSerializedPairs","pairs","userPairs","forChain","pairId","combinedList","concat","keyed","reduce","memo","sorted","sortsBefore","key"],"mappings":"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","sourcesContent":["import { ChainId, Pair, Token, Currency } from '@bscswap/sdk'\nimport flatMap from 'lodash.flatmap'\nimport { useCallback, useMemo } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../constants'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  dismissTokenWarning,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  updateUserDarkMode,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserSlippageTolerance\n} from './actions'\nimport { useDefaultTokenList } from '../lists/hooks'\nimport { isDefaultToken } from '../../utils'\n\nfunction serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  }\n}\n\nfunction deserializeToken(serializedToken: SerializedToken): Token {\n  return new Token(\n    serializedToken.chainId,\n    serializedToken.address,\n    serializedToken.decimals,\n    serializedToken.symbol,\n    serializedToken.name\n  )\n}\n\nexport function useIsDarkMode(): boolean {\n  const { userDarkMode, matchesDarkMode } = useSelector<\n    AppState,\n    { userDarkMode: boolean | null; matchesDarkMode: boolean }\n  >(\n    ({ user: { matchesDarkMode, userDarkMode } }) => ({\n      userDarkMode,\n      matchesDarkMode\n    }),\n    shallowEqual\n  )\n\n  return userDarkMode === null ? matchesDarkMode : userDarkMode\n}\n\nexport function useDarkModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const darkMode = useIsDarkMode()\n\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({ userDarkMode: !darkMode }))\n  }, [darkMode, dispatch])\n\n  return [darkMode, toggleSetDarkMode]\n}\n\nexport function useIsExpertMode(): boolean {\n  return useSelector<AppState, AppState['user']['userExpertMode']>(state => state.user.userExpertMode)\n}\n\nexport function useExpertModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const expertMode = useIsExpertMode()\n\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\n  }, [expertMode, dispatch])\n\n  return [expertMode, toggleSetExpertMode]\n}\n\nexport function useUserSlippageTolerance(): [number, (slippage: number) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userSlippageTolerance = useSelector<AppState, AppState['user']['userSlippageTolerance']>(state => {\n    return state.user.userSlippageTolerance\n  })\n\n  const setUserSlippageTolerance = useCallback(\n    (userSlippageTolerance: number) => {\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance }))\n    },\n    [dispatch]\n  )\n\n  return [userSlippageTolerance, setUserSlippageTolerance]\n}\n\nexport function useUserDeadline(): [number, (slippage: number) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userDeadline = useSelector<AppState, AppState['user']['userDeadline']>(state => {\n    return state.user.userDeadline\n  })\n\n  const setUserDeadline = useCallback(\n    (userDeadline: number) => {\n      dispatch(updateUserDeadline({ userDeadline }))\n    },\n    [dispatch]\n  )\n\n  return [userDeadline, setUserDeadline]\n}\n\nexport function useAddUserToken(): (token: Token) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (token: Token) => {\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\n    },\n    [dispatch]\n  )\n}\n\nexport function useRemoveUserAddedToken(): (chainId: number, address: string) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (chainId: number, address: string) => {\n      dispatch(removeSerializedToken({ chainId, address }))\n    },\n    [dispatch]\n  )\n}\n\nexport function useUserAddedTokens(): Token[] {\n  const { chainId } = useActiveWeb3React()\n  const serializedTokensMap = useSelector<AppState, AppState['user']['tokens']>(({ user: { tokens } }) => tokens)\n\n  return useMemo(() => {\n    if (!chainId) return []\n    return Object.values(serializedTokensMap[chainId as ChainId] ?? {}).map(deserializeToken)\n  }, [serializedTokensMap, chainId])\n}\n\nfunction serializePair(pair: Pair): SerializedPair {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1)\n  }\n}\n\nexport function usePairAdder(): (pair: Pair) => void {\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (pair: Pair) => {\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\n    },\n    [dispatch]\n  )\n}\n\n/**\n * Returns whether a token warning has been dismissed and a callback to dismiss it,\n * iff it has not already been dismissed and is a valid token.\n */\nexport function useTokenWarningDismissal(chainId?: number, token?: Currency): [boolean, null | (() => void)] {\n  const dismissalState = useSelector<AppState, AppState['user']['dismissedTokenWarnings']>(\n    state => state.user.dismissedTokenWarnings\n  )\n\n  const dispatch = useDispatch<AppDispatch>()\n\n  // get default list, mark as dismissed if on list\n  const defaultList = useDefaultTokenList()\n  const isDefault = isDefaultToken(defaultList, token)\n\n  return useMemo(() => {\n    if (!chainId || !token) return [false, null]\n\n    const dismissed: boolean =\n      token instanceof Token ? dismissalState?.[chainId]?.[token.address] === true || isDefault : true\n\n    const callback =\n      dismissed || !(token instanceof Token)\n        ? null\n        : () => dispatch(dismissTokenWarning({ chainId, tokenAddress: token.address }))\n\n    return [dismissed, callback]\n  }, [chainId, token, dismissalState, isDefault, dispatch])\n}\n\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'BLP', 'BSCswap LP Token')\n}\n\n/**\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\n */\nexport function useTrackedTokenPairs(): [Token, Token][] {\n  const { chainId } = useActiveWeb3React()\n  const tokens = useAllTokens()\n\n  // pinned pairs\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\n\n  // pairs for every token against every base\n  const generatedPairs: [Token, Token][] = useMemo(\n    () =>\n      chainId\n        ? flatMap(Object.keys(tokens), tokenAddress => {\n            const token = tokens[tokenAddress]\n            // for each token on the current chain,\n            return (\n              // loop though all bases on the current chain\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\n                // to construct pairs of the given token with each base\n                .map(base => {\n                  if (base.address === token.address) {\n                    return null\n                  } else {\n                    return [base, token]\n                  }\n                })\n                .filter((p): p is [Token, Token] => p !== null)\n            )\n          })\n        : [],\n    [tokens, chainId]\n  )\n\n  // pairs saved by users\n  const savedSerializedPairs = useSelector<AppState, AppState['user']['pairs']>(({ user: { pairs } }) => pairs)\n\n  const userPairs: [Token, Token][] = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return []\n    const forChain = savedSerializedPairs[chainId]\n    if (!forChain) return []\n\n    return Object.keys(forChain).map(pairId => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\n    })\n  }, [savedSerializedPairs, chainId])\n\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [\n    generatedPairs,\n    pinnedPairs,\n    userPairs\n  ])\n\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB)\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\n      if (memo[key]) return memo\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\n      return memo\n    }, {})\n\n    return Object.keys(keyed).map(key => keyed[key])\n  }, [combinedList])\n}\n"]},"metadata":{},"sourceType":"module"}