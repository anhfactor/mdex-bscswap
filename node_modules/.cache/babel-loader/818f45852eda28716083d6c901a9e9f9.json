{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport uriToHttp from '../../utils/uriToHttp';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n/**\n * Contains the logic for resolving a URL to a valid token list\n * @param listUrl list url\n */\n\nasync function getTokenList(listUrl) {\n  const urls = uriToHttp(listUrl);\n\n  for (const url of urls) {\n    let response;\n\n    try {\n      response = await fetch(url);\n      if (!response.ok) continue;\n    } catch (error) {\n      console.error(`failed to fetch list ${listUrl} at uri ${url}`);\n      continue;\n    }\n\n    const json = await response.json();\n\n    if (!tokenListValidator(json)) {\n      var _tokenListValidator$e, _tokenListValidator$e2;\n\n      throw new Error((_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n        var _error$message;\n\n        const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'Token list failed validation');\n    }\n\n    return json;\n  }\n\n  throw new Error('Unrecognized list URL protocol.');\n}\n\nconst fetchCache = {};\nexport const fetchTokenList = createAsyncThunk('lists/fetchTokenList', url => {\n  var _fetchCache$url;\n\n  return (// this makes it so we only ever fetch a list a single time concurrently\n    fetchCache[url] = (_fetchCache$url = fetchCache[url]) !== null && _fetchCache$url !== void 0 ? _fetchCache$url : getTokenList(url).catch(error => {\n      delete fetchCache[url];\n      throw error;\n    })\n  );\n});\nexport const acceptListUpdate = createAction('lists/acceptListUpdate');\nexport const addList = createAction('lists/addList');\nexport const rejectVersionUpdate = createAction('lists/rejectVersionUpdate');","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/lists/actions.ts"],"names":["createAction","createAsyncThunk","schema","Ajv","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","urls","url","response","fetch","ok","error","console","json","Error","errors","reduce","memo","add","dataPath","message","length","fetchCache","fetchTokenList","catch","acceptListUpdate","addList","rejectVersionUpdate"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C;AAEA,OAAOC,MAAP,MAAmB,gDAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,MAAMC,kBAAkB,GAAG,IAAIF,GAAJ,CAAQ;AAAEG,EAAAA,SAAS,EAAE;AAAb,CAAR,EAA6BC,OAA7B,CAAqCL,MAArC,CAA3B;AAEA;;;;;AAIA,eAAeM,YAAf,CAA4BC,OAA5B,EAAiE;AAC/D,QAAMC,IAAI,GAAGN,SAAS,CAACK,OAAD,CAAtB;;AACA,OAAK,MAAME,GAAX,IAAkBD,IAAlB,EAAwB;AACtB,QAAIE,QAAJ;;AACA,QAAI;AACFA,MAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAtB;AACA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AACnB,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAe,wBAAuBN,OAAQ,WAAUE,GAAI,EAA5D;AACA;AACD;;AAED,UAAMM,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAI,CAACZ,kBAAkB,CAACY,IAAD,CAAvB,EAA+B;AAAA;;AAC7B,YAAM,IAAIC,KAAJ,oDACJb,kBAAkB,CAACc,MADf,2DACJ,uBAA2BC,MAA3B,CAA0C,CAACC,IAAD,EAAON,KAAP,KAAiB;AAAA;;AACzD,cAAMO,GAAG,GAAI,GAAEP,KAAK,CAACQ,QAAS,IAAlB,kBAAqBR,KAAK,CAACS,OAA3B,2DAAsC,EAAG,EAArD;AACA,eAAOH,IAAI,CAACI,MAAL,GAAc,CAAd,GAAmB,GAAEJ,IAAK,KAAIC,GAAI,EAAlC,GAAuC,GAAEA,GAAI,EAApD;AACD,OAHD,EAGG,EAHH,CADI,yEAIM,8BAJN,CAAN;AAMD;;AACD,WAAOL,IAAP;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,MAAMQ,UAAiD,GAAG,EAA1D;AACA,OAAO,MAAMC,cAAc,GAAG1B,gBAAgB,CAC5C,sBAD4C,EAE3CU,GAAD;AAAA;;AAAA,SACE;AACCe,IAAAA,UAAU,CAACf,GAAD,CAAV,sBACCe,UAAU,CAACf,GAAD,CADX,6DAECH,YAAY,CAACG,GAAD,CAAZ,CAAkBiB,KAAlB,CAAwBb,KAAK,IAAI;AAC/B,aAAOW,UAAU,CAACf,GAAD,CAAjB;AACA,YAAMI,KAAN;AACD,KAHD;AAJJ;AAAA,CAF4C,CAAvC;AAYP,OAAO,MAAMc,gBAAgB,GAAG7B,YAAY,CAAS,wBAAT,CAArC;AACP,OAAO,MAAM8B,OAAO,GAAG9B,YAAY,CAAS,eAAT,CAA5B;AACP,OAAO,MAAM+B,mBAAmB,GAAG/B,YAAY,CAAU,2BAAV,CAAxC","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit'\nimport { TokenList, Version } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport uriToHttp from '../../utils/uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a URL to a valid token list\n * @param listUrl list url\n */\nasync function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls = uriToHttp(listUrl)\n  for (const url of urls) {\n    let response\n    try {\n      response = await fetch(url)\n      if (!response.ok) continue\n    } catch (error) {\n      console.error(`failed to fetch list ${listUrl} at uri ${url}`)\n      continue\n    }\n\n    const json = await response.json()\n    if (!tokenListValidator(json)) {\n      throw new Error(\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.dataPath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'Token list failed validation'\n      )\n    }\n    return json\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n\nconst fetchCache: { [url: string]: Promise<TokenList> } = {}\nexport const fetchTokenList = createAsyncThunk<TokenList, string>(\n  'lists/fetchTokenList',\n  (url: string) =>\n    // this makes it so we only ever fetch a list a single time concurrently\n    (fetchCache[url] =\n      fetchCache[url] ??\n      getTokenList(url).catch(error => {\n        delete fetchCache[url]\n        throw error\n      }))\n)\n\nexport const acceptListUpdate = createAction<string>('lists/acceptListUpdate')\nexport const addList = createAction<string>('lists/addList')\nexport const rejectVersionUpdate = createAction<Version>('lists/rejectVersionUpdate')\n"]},"metadata":{},"sourceType":"module"}