{"ast":null,"code":"import { WETH } from '@bscswap/sdk';\nimport { useMemo } from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAllTokenBalances } from '../../state/wallet/hooks'; // compare two token amounts with highest one coming first\n\nfunction balanceComparator(balanceA, balanceB) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1;\n  } else if (balanceA && balanceA.greaterThan('0')) {\n    return -1;\n  } else if (balanceB && balanceB.greaterThan('0')) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getTokenComparator(weth, balances) {\n  return function sortTokens(tokenA, tokenB) {\n    // -1 = a is first\n    // 1 = b is first\n    // sort ETH first\n    if (weth) {\n      if (tokenA.equals(weth)) return -1;\n      if (tokenB.equals(weth)) return 1;\n    } // sort by balances\n\n\n    const balanceA = balances[tokenA.address];\n    const balanceB = balances[tokenB.address];\n    const balanceComp = balanceComparator(balanceA, balanceB);\n    if (balanceComp !== 0) return balanceComp; // sort by symbol\n\n    return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1;\n  };\n}\n\nexport function useTokenComparator(inverted) {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const weth = WETH[chainId];\n  const balances = useAllTokenBalances();\n  const comparator = useMemo(() => getTokenComparator(weth, balances !== null && balances !== void 0 ? balances : {}), [balances, weth]);\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA, tokenB) => comparator(tokenA, tokenB) * -1;\n    } else {\n      return comparator;\n    }\n  }, [inverted, comparator]);\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/components/SearchModal/sorting.ts"],"names":["WETH","useMemo","useActiveWeb3React","useAllTokenBalances","balanceComparator","balanceA","balanceB","greaterThan","equalTo","getTokenComparator","weth","balances","sortTokens","tokenA","tokenB","equals","address","balanceComp","symbol","toLowerCase","useTokenComparator","inverted","chainId","comparator"],"mappings":"AAAA,SAA6BA,IAA7B,QAAyC,cAAzC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,SAASC,iBAAT,CAA2BC,QAA3B,EAAmDC,QAAnD,EAA2E;AACzE,MAAID,QAAQ,IAAIC,QAAhB,EAA0B;AACxB,WAAOD,QAAQ,CAACE,WAAT,CAAqBD,QAArB,IAAiC,CAAC,CAAlC,GAAsCD,QAAQ,CAACG,OAAT,CAAiBF,QAAjB,IAA6B,CAA7B,GAAiC,CAA9E;AACD,GAFD,MAEO,IAAID,QAAQ,IAAIA,QAAQ,CAACE,WAAT,CAAqB,GAArB,CAAhB,EAA2C;AAChD,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAID,QAAQ,IAAIA,QAAQ,CAACC,WAAT,CAAqB,GAArB,CAAhB,EAA2C;AAChD,WAAO,CAAP;AACD;;AACD,SAAO,CAAP;AACD;;AAED,SAASE,kBAAT,CACEC,IADF,EAEEC,QAFF,EAG4C;AAC1C,SAAO,SAASC,UAAT,CAAoBC,MAApB,EAAmCC,MAAnC,EAA0D;AAC/D;AACA;AAEA;AACA,QAAIJ,IAAJ,EAAU;AACR,UAAIG,MAAM,CAACE,MAAP,CAAcL,IAAd,CAAJ,EAAyB,OAAO,CAAC,CAAR;AACzB,UAAII,MAAM,CAACC,MAAP,CAAcL,IAAd,CAAJ,EAAyB,OAAO,CAAP;AAC1B,KAR8D,CAU/D;;;AACA,UAAML,QAAQ,GAAGM,QAAQ,CAACE,MAAM,CAACG,OAAR,CAAzB;AACA,UAAMV,QAAQ,GAAGK,QAAQ,CAACG,MAAM,CAACE,OAAR,CAAzB;AAEA,UAAMC,WAAW,GAAGb,iBAAiB,CAACC,QAAD,EAAWC,QAAX,CAArC;AACA,QAAIW,WAAW,KAAK,CAApB,EAAuB,OAAOA,WAAP,CAfwC,CAiB/D;;AACA,WAAOJ,MAAM,CAACK,MAAP,CAAcC,WAAd,KAA8BL,MAAM,CAACI,MAAP,CAAcC,WAAd,EAA9B,GAA4D,CAAC,CAA7D,GAAiE,CAAxE;AACD,GAnBD;AAoBD;;AAED,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAyF;AAC9F,QAAM;AAAEC,IAAAA;AAAF,MAAcpB,kBAAkB,EAAtC;AACA,QAAMQ,IAAI,GAAGV,IAAI,CAACsB,OAAD,CAAjB;AACA,QAAMX,QAAQ,GAAGR,mBAAmB,EAApC;AACA,QAAMoB,UAAU,GAAGtB,OAAO,CAAC,MAAMQ,kBAAkB,CAACC,IAAD,EAAOC,QAAP,aAAOA,QAAP,cAAOA,QAAP,GAAmB,EAAnB,CAAzB,EAAiD,CAACA,QAAD,EAAWD,IAAX,CAAjD,CAA1B;AACA,SAAOT,OAAO,CAAC,MAAM;AACnB,QAAIoB,QAAJ,EAAc;AACZ,aAAO,CAACR,MAAD,EAAgBC,MAAhB,KAAkCS,UAAU,CAACV,MAAD,EAASC,MAAT,CAAV,GAA6B,CAAC,CAAvE;AACD,KAFD,MAEO;AACL,aAAOS,UAAP;AACD;AACF,GANa,EAMX,CAACF,QAAD,EAAWE,UAAX,CANW,CAAd;AAOD","sourcesContent":["import { Token, TokenAmount, WETH } from '@bscswap/sdk'\nimport { useMemo } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\n  } else if (balanceA && balanceA.greaterThan('0')) {\n    return -1\n  } else if (balanceB && balanceB.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\nfunction getTokenComparator(\n  weth: Token | undefined,\n  balances: { [tokenAddress: string]: TokenAmount }\n): (tokenA: Token, tokenB: Token) => number {\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort ETH first\n    if (weth) {\n      if (tokenA.equals(weth)) return -1\n      if (tokenB.equals(weth)) return 1\n    }\n\n    // sort by balances\n    const balanceA = balances[tokenA.address]\n    const balanceB = balances[tokenB.address]\n\n    const balanceComp = balanceComparator(balanceA, balanceB)\n    if (balanceComp !== 0) return balanceComp\n\n    // sort by symbol\n    return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\n  }\n}\n\nexport function useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\n  const { chainId } = useActiveWeb3React()\n  const weth = WETH[chainId]\n  const balances = useAllTokenBalances()\n  const comparator = useMemo(() => getTokenComparator(weth, balances ?? {}), [balances, weth])\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\n    } else {\n      return comparator\n    }\n  }, [inverted, comparator])\n}\n"]},"metadata":{},"sourceType":"module"}