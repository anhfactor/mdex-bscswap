{"ast":null,"code":"var _jsxFileName = \"/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/components/Web3Status/index.tsx\";\nimport React, { useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { darken, lighten } from 'polished';\nimport { Activity } from 'react-feather';\nimport useENSName from '../../hooks/useENSName';\nimport { useHasSocks } from '../../hooks/useSocksBalance';\nimport { useWalletModalToggle } from '../../state/application/hooks';\nimport Identicon from '../Identicon';\nimport PortisIcon from '../../assets/images/portisIcon.png';\nimport WalletModal from '../WalletModal';\nimport { ButtonSecondary } from '../Button';\nimport BinanceIcon from \"../../assets/images/bnb.svg\";\nimport FortmaticIcon from '../../assets/images/fortmaticIcon.png';\nimport WalletConnectIcon from \"../../assets/images/walletConnectIcon.svg\";\nimport CoinbaseWalletIcon from \"../../assets/images/coinbaseWalletIcon.svg\";\nimport { RowBetween } from '../Row';\nimport { shortenAddress } from '../../utils';\nimport { useAllTransactions } from '../../state/transactions/hooks';\nimport { NetworkContextName } from '../../constants';\nimport { injected, binanceinjected, walletconnect, walletlink, fortmatic, portis } from '../../connectors';\nimport Loader from '../Loader';\nconst IconWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  & > * {\n    height: ${({\n  size\n}) => size ? size + 'px' : '32px'};\n    width: ${({\n  size\n}) => size ? size + 'px' : '32px'};\n  }\n`;\nconst Web3StatusGeneric = styled(ButtonSecondary)`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  width: 100%;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 12px;\n  cursor: pointer;\n  user-select: none;\n  :focus {\n    outline: none;\n  }\n`;\nconst Web3StatusError = styled(Web3StatusGeneric)`\n  background-color: ${({\n  theme\n}) => theme.red1};\n  border: 1px solid ${({\n  theme\n}) => theme.red1};\n  color: ${({\n  theme\n}) => theme.white};\n  font-weight: 500;\n  :hover,\n  :focus {\n    background-color: ${({\n  theme\n}) => darken(0.1, theme.red1)};\n  }\n`;\nconst Web3StatusConnect = styled(Web3StatusGeneric)`\n  background-color: ${({\n  theme\n}) => theme.primary4};\n  border: none;\n  color: ${({\n  theme\n}) => theme.primaryText1};\n  font-weight: 500;\n\n  :hover,\n  :focus {\n    border: 1px solid ${({\n  theme\n}) => darken(0.05, theme.primary4)};\n    color: ${({\n  theme\n}) => theme.primaryText1};\n  }\n\n  ${({\n  faded\n}) => faded && css`\n      background-color: ${({\n  theme\n}) => theme.primary5};\n      border: 1px solid ${({\n  theme\n}) => theme.primary5};\n      color: ${({\n  theme\n}) => theme.primaryText1};\n\n      :hover,\n      :focus {\n        border: 1px solid ${({\n  theme\n}) => darken(0.05, theme.primary4)};\n        color: ${({\n  theme\n}) => darken(0.05, theme.primaryText1)};\n      }\n    `}\n`;\nconst Web3StatusConnected = styled(Web3StatusGeneric)`\n  background-color: ${({\n  pending,\n  theme\n}) => pending ? theme.primary1 : theme.bg2};\n  border: 1px solid ${({\n  pending,\n  theme\n}) => pending ? theme.primary1 : theme.bg3};\n  color: ${({\n  pending,\n  theme\n}) => pending ? theme.white : theme.text1};\n  font-weight: 500;\n  :hover,\n  :focus {\n    background-color: ${({\n  pending,\n  theme\n}) => pending ? darken(0.05, theme.primary1) : lighten(0.05, theme.bg2)};\n\n    :focus {\n      border: 1px solid ${({\n  pending,\n  theme\n}) => pending ? darken(0.1, theme.primary1) : darken(0.1, theme.bg3)};\n    }\n  }\n`;\nconst Text = styled.p`\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0 0.5rem 0 0.25rem;\n  font-size: 1rem;\n  width: fit-content;\n  font-weight: 500;\n`;\nconst NetworkIcon = styled(Activity)`\n  margin-left: 0.25rem;\n  margin-right: 0.5rem;\n  width: 16px;\n  height: 16px;\n`; // we want the latest one to come first, so return negative if a is after b\n\nfunction newTranscationsFirst(a, b) {\n  return b.addedTime - a.addedTime;\n}\n\nfunction recentTransactionsOnly(a) {\n  return new Date().getTime() - a.addedTime < 86400000;\n}\n\nconst SOCK = /*#__PURE__*/React.createElement(\"span\", {\n  role: \"img\",\n  \"aria-label\": \"has socks emoji\",\n  style: {\n    marginTop: -4,\n    marginBottom: -4\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 3\n  }\n}, \"\\uD83E\\uDDE6\");\nexport default function Web3Status() {\n  const {\n    t\n  } = useTranslation();\n  const {\n    active,\n    account,\n    connector,\n    error\n  } = useWeb3React();\n  const contextNetwork = useWeb3React(NetworkContextName);\n  const {\n    ENSName\n  } = useENSName(account);\n  const allTransactions = useAllTransactions();\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions);\n    return txs.filter(recentTransactionsOnly).sort(newTranscationsFirst);\n  }, [allTransactions]);\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt).map(tx => tx.hash);\n  const confirmed = sortedRecentTransactions.filter(tx => tx.receipt).map(tx => tx.hash);\n  const hasPendingTransactions = !!pending.length;\n  const hasSocks = useHasSocks();\n  const toggleWalletModal = useWalletModalToggle(); // handle the logo we want to show with the account\n\n  function getStatusIcon() {\n    if (connector === injected) {\n      return /*#__PURE__*/React.createElement(Identicon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 14\n        }\n      });\n    } else if (connector === binanceinjected) {\n      return /*#__PURE__*/React.createElement(IconWrapper, {\n        size: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: BinanceIcon,\n        alt: '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }\n      }));\n    } else if (connector === walletconnect) {\n      return /*#__PURE__*/React.createElement(IconWrapper, {\n        size: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: WalletConnectIcon,\n        alt: '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }\n      }));\n    } else if (connector === walletlink) {\n      return /*#__PURE__*/React.createElement(IconWrapper, {\n        size: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: CoinbaseWalletIcon,\n        alt: '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }));\n    } else if (connector === fortmatic) {\n      return /*#__PURE__*/React.createElement(IconWrapper, {\n        size: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: FortmaticIcon,\n        alt: '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }));\n    } else if (connector === portis) {\n      return /*#__PURE__*/React.createElement(IconWrapper, {\n        size: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: PortisIcon,\n        alt: '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n  function getWeb3Status() {\n    if (account) {\n      return /*#__PURE__*/React.createElement(Web3StatusConnected, {\n        id: \"web3-status-connected\",\n        onClick: toggleWalletModal,\n        pending: hasPendingTransactions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }, hasPendingTransactions ? /*#__PURE__*/React.createElement(RowBetween, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }\n      }, pending === null || pending === void 0 ? void 0 : pending.length, \" Pending\"), \" \", /*#__PURE__*/React.createElement(Loader, {\n        stroke: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 54\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null, hasSocks ? SOCK : null, /*#__PURE__*/React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }\n      }, ENSName || shortenAddress(account))), !hasPendingTransactions && getStatusIcon());\n    } else if (error) {\n      return /*#__PURE__*/React.createElement(Web3StatusError, {\n        onClick: toggleWalletModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(NetworkIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }\n      }, error instanceof UnsupportedChainIdError ? 'Wrong Network' : 'Error'));\n    } else {\n      return /*#__PURE__*/React.createElement(Web3StatusConnect, {\n        id: \"connect-wallet\",\n        onClick: toggleWalletModal,\n        faded: !account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }\n      }, t('connectToWallet')));\n    }\n  }\n\n  if (!contextNetwork.active && !active) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, getWeb3Status(), /*#__PURE__*/React.createElement(WalletModal, {\n    ENSName: ENSName,\n    pendingTransactions: pending,\n    confirmedTransactions: confirmed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/components/Web3Status/index.tsx"],"names":["React","useMemo","styled","css","useTranslation","useWeb3React","UnsupportedChainIdError","darken","lighten","Activity","useENSName","useHasSocks","useWalletModalToggle","Identicon","PortisIcon","WalletModal","ButtonSecondary","FortmaticIcon","RowBetween","shortenAddress","useAllTransactions","NetworkContextName","injected","binanceinjected","walletconnect","walletlink","fortmatic","portis","Loader","IconWrapper","div","theme","flexColumnNoWrap","size","Web3StatusGeneric","flexRowNoWrap","Web3StatusError","red1","white","Web3StatusConnect","primary4","primaryText1","faded","primary5","Web3StatusConnected","pending","primary1","bg2","bg3","text1","Text","p","NetworkIcon","newTranscationsFirst","a","b","addedTime","recentTransactionsOnly","Date","getTime","SOCK","marginTop","marginBottom","Web3Status","t","active","account","connector","error","contextNetwork","ENSName","allTransactions","sortedRecentTransactions","txs","Object","values","filter","sort","tx","receipt","map","hash","confirmed","hasPendingTransactions","length","hasSocks","toggleWalletModal","getStatusIcon","BinanceIcon","WalletConnectIcon","CoinbaseWalletIcon","getWeb3Status"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useTranslation } from 'react-i18next'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { darken, lighten } from 'polished'\nimport { Activity } from 'react-feather'\nimport useENSName from '../../hooks/useENSName'\nimport { useHasSocks } from '../../hooks/useSocksBalance'\nimport { useWalletModalToggle } from '../../state/application/hooks'\nimport { TransactionDetails } from '../../state/transactions/reducer'\n\nimport Identicon from '../Identicon'\nimport PortisIcon from '../../assets/images/portisIcon.png'\nimport WalletModal from '../WalletModal'\nimport { ButtonSecondary } from '../Button'\nimport BinanceIcon from '../../assets/images/bnb.svg'\nimport FortmaticIcon from '../../assets/images/fortmaticIcon.png'\nimport WalletConnectIcon from '../../assets/images/walletConnectIcon.svg'\nimport CoinbaseWalletIcon from '../../assets/images/coinbaseWalletIcon.svg'\n\nimport { RowBetween } from '../Row'\nimport { shortenAddress } from '../../utils'\nimport { useAllTransactions } from '../../state/transactions/hooks'\nimport { NetworkContextName } from '../../constants'\nimport { injected, binanceinjected, walletconnect, walletlink, fortmatic, portis } from '../../connectors'\nimport Loader from '../Loader'\n\nconst IconWrapper = styled.div<{ size?: number }>`\n  ${({ theme }) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  & > * {\n    height: ${({ size }) => (size ? size + 'px' : '32px')};\n    width: ${({ size }) => (size ? size + 'px' : '32px')};\n  }\n`\n\nconst Web3StatusGeneric = styled(ButtonSecondary)`\n  ${({ theme }) => theme.flexRowNoWrap}\n  width: 100%;\n  align-items: center;\n  padding: 0.5rem;\n  border-radius: 12px;\n  cursor: pointer;\n  user-select: none;\n  :focus {\n    outline: none;\n  }\n`\nconst Web3StatusError = styled(Web3StatusGeneric)`\n  background-color: ${({ theme }) => theme.red1};\n  border: 1px solid ${({ theme }) => theme.red1};\n  color: ${({ theme }) => theme.white};\n  font-weight: 500;\n  :hover,\n  :focus {\n    background-color: ${({ theme }) => darken(0.1, theme.red1)};\n  }\n`\n\nconst Web3StatusConnect = styled(Web3StatusGeneric)<{ faded?: boolean }>`\n  background-color: ${({ theme }) => theme.primary4};\n  border: none;\n  color: ${({ theme }) => theme.primaryText1};\n  font-weight: 500;\n\n  :hover,\n  :focus {\n    border: 1px solid ${({ theme }) => darken(0.05, theme.primary4)};\n    color: ${({ theme }) => theme.primaryText1};\n  }\n\n  ${({ faded }) =>\n    faded &&\n    css`\n      background-color: ${({ theme }) => theme.primary5};\n      border: 1px solid ${({ theme }) => theme.primary5};\n      color: ${({ theme }) => theme.primaryText1};\n\n      :hover,\n      :focus {\n        border: 1px solid ${({ theme }) => darken(0.05, theme.primary4)};\n        color: ${({ theme }) => darken(0.05, theme.primaryText1)};\n      }\n    `}\n`\n\nconst Web3StatusConnected = styled(Web3StatusGeneric)<{ pending?: boolean }>`\n  background-color: ${({ pending, theme }) => (pending ? theme.primary1 : theme.bg2)};\n  border: 1px solid ${({ pending, theme }) => (pending ? theme.primary1 : theme.bg3)};\n  color: ${({ pending, theme }) => (pending ? theme.white : theme.text1)};\n  font-weight: 500;\n  :hover,\n  :focus {\n    background-color: ${({ pending, theme }) => (pending ? darken(0.05, theme.primary1) : lighten(0.05, theme.bg2))};\n\n    :focus {\n      border: 1px solid ${({ pending, theme }) => (pending ? darken(0.1, theme.primary1) : darken(0.1, theme.bg3))};\n    }\n  }\n`\n\nconst Text = styled.p`\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0 0.5rem 0 0.25rem;\n  font-size: 1rem;\n  width: fit-content;\n  font-weight: 500;\n`\n\nconst NetworkIcon = styled(Activity)`\n  margin-left: 0.25rem;\n  margin-right: 0.5rem;\n  width: 16px;\n  height: 16px;\n`\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTranscationsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction recentTransactionsOnly(a: TransactionDetails) {\n  return new Date().getTime() - a.addedTime < 86_400_000\n}\n\nconst SOCK = (\n  <span role=\"img\" aria-label=\"has socks emoji\" style={{ marginTop: -4, marginBottom: -4 }}>\n    🧦\n  </span>\n)\n\nexport default function Web3Status() {\n  const { t } = useTranslation()\n  const { active, account, connector, error } = useWeb3React()\n  const contextNetwork = useWeb3React(NetworkContextName)\n\n  const { ENSName } = useENSName(account)\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(recentTransactionsOnly).sort(newTranscationsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt).map(tx => tx.hash)\n  const confirmed = sortedRecentTransactions.filter(tx => tx.receipt).map(tx => tx.hash)\n\n  const hasPendingTransactions = !!pending.length\n  const hasSocks = useHasSocks()\n  const toggleWalletModal = useWalletModalToggle()\n\n  // handle the logo we want to show with the account\n  function getStatusIcon() {\n    if (connector === injected) {\n      return <Identicon />\n    } else if (connector === binanceinjected) {\n      return (\n        <IconWrapper size={16}>\n          <img src={BinanceIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === walletconnect) {\n      return (\n        <IconWrapper size={16}>\n          <img src={WalletConnectIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === walletlink) {\n      return (\n        <IconWrapper size={16}>\n          <img src={CoinbaseWalletIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === fortmatic) {\n      return (\n        <IconWrapper size={16}>\n          <img src={FortmaticIcon} alt={''} />\n        </IconWrapper>\n      )\n    } else if (connector === portis) {\n      return (\n        <IconWrapper size={16}>\n          <img src={PortisIcon} alt={''} />\n        </IconWrapper>\n      )\n    }\n  }\n\n  function getWeb3Status() {\n    if (account) {\n      return (\n        <Web3StatusConnected id=\"web3-status-connected\" onClick={toggleWalletModal} pending={hasPendingTransactions}>\n          {hasPendingTransactions ? (\n            <RowBetween>\n              <Text>{pending?.length} Pending</Text> <Loader stroke=\"white\" />\n            </RowBetween>\n          ) : (\n            <>\n              {hasSocks ? SOCK : null}\n              <Text>{ENSName || shortenAddress(account)}</Text>\n            </>\n          )}\n          {!hasPendingTransactions && getStatusIcon()}\n        </Web3StatusConnected>\n      )\n    } else if (error) {\n      return (\n        <Web3StatusError onClick={toggleWalletModal}>\n          <NetworkIcon />\n          <Text>{error instanceof UnsupportedChainIdError ? 'Wrong Network' : 'Error'}</Text>\n        </Web3StatusError>\n      )\n    } else {\n      return (\n        <Web3StatusConnect id=\"connect-wallet\" onClick={toggleWalletModal} faded={!account}>\n          <Text>{t('connectToWallet')}</Text>\n        </Web3StatusConnect>\n      )\n    }\n  }\n\n  if (!contextNetwork.active && !active) {\n    return null\n  }\n\n  return (\n    <>\n      {getWeb3Status()}\n      <WalletModal ENSName={ENSName} pendingTransactions={pending} confirmedTransactions={confirmed} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}