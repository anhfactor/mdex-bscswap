{"ast":null,"code":"import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DEFAULT_TOKEN_LIST_URL } from '../../constants';\nimport { addPopup } from '../application/actions';\nimport { acceptListUpdate, addList, fetchTokenList } from './actions';\nexport default function Updater() {\n  const dispatch = useDispatch();\n  const lists = useSelector(state => state.lists.byUrl); // we should always fetch the default token list, so add it\n\n  useEffect(() => {\n    if (!lists[DEFAULT_TOKEN_LIST_URL]) dispatch(addList(DEFAULT_TOKEN_LIST_URL));\n  }, [dispatch, lists]); // on initial mount, refetch all the lists in storage\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => dispatch(fetchTokenList(listUrl))); // we only do this once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        dispatch(fetchTokenList(listUrl));\n      }\n    });\n  }, [dispatch, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            // const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            //if (bump >= min) {\n            dispatch(acceptListUpdate(listUrl));\n            dispatch(addPopup({\n              key: listUrl,\n              content: {\n                listUpdate: {\n                  listUrl,\n                  oldList: list.current,\n                  newList: list.pendingUpdate,\n                  auto: true\n                }\n              }\n            })); //} else {\n            //  console.error(\n            //    `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n            //  )\n            //}\n\n            break;\n          // this will be turned on later\n          // case VersionUpgrade.MAJOR:\n          // dispatch(\n          //   addPopup({\n          //     key: listUrl,\n          //     content: {\n          //       listUpdate: {\n          //         listUrl,\n          //         auto: false,\n          //         oldList: list.current,\n          //         newList: list.pendingUpdate\n          //       }\n          //     }\n          //   })\n          // )\n        }\n      }\n    });\n  }, [dispatch, lists]);\n  return null;\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/lists/updater.ts"],"names":["getVersionUpgrade","VersionUpgrade","useEffect","useDispatch","useSelector","DEFAULT_TOKEN_LIST_URL","addPopup","acceptListUpdate","addList","fetchTokenList","Updater","dispatch","lists","state","byUrl","Object","keys","forEach","listUrl","list","current","loadingRequestId","error","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR","key","content","listUpdate","oldList","newList","auto"],"mappings":"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","sourcesContent":["import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DEFAULT_TOKEN_LIST_URL } from '../../constants'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate, addList, fetchTokenList } from './actions'\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n\n  // we should always fetch the default token list, so add it\n  useEffect(() => {\n    if (!lists[DEFAULT_TOKEN_LIST_URL]) dispatch(addList(DEFAULT_TOKEN_LIST_URL))\n  }, [dispatch, lists])\n\n  // on initial mount, refetch all the lists in storage\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => dispatch(fetchTokenList(listUrl) as any))\n    // we only do this once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch])\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        dispatch(fetchTokenList(listUrl) as any)\n      }\n    })\n  }, [dispatch, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            // const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            //if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      oldList: list.current,\n                      newList: list.pendingUpdate,\n                      auto: true\n                    }\n                  }\n                })\n              )\n            //} else {\n            //  console.error(\n            //    `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n            //  )\n            //}\n            break\n\n          // this will be turned on later\n          // case VersionUpgrade.MAJOR:\n          // dispatch(\n          //   addPopup({\n          //     key: listUrl,\n          //     content: {\n          //       listUpdate: {\n          //         listUrl,\n          //         auto: false,\n          //         oldList: list.current,\n          //         newList: list.pendingUpdate\n          //       }\n          //     }\n          //   })\n          // )\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}