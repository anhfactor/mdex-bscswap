{"ast":null,"code":"import useENS from '../../hooks/useENS';\nimport { Version } from '../../hooks/useToggledVersion';\nimport { parseUnits } from '@ethersproject/units';\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@bscswap/sdk';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useV1Trade } from '../../data/V1';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport useToggledVersion from '../../hooks/useToggledVersion';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\nimport { useTranslation } from 'react-i18next';\nexport function useSwapState() {\n  return useSelector(state => state.swap);\n}\nexport function useSwapActionHandlers() {\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n} // try to parse a user entered amount for a given token\n\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return;\n  }\n\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  } // necessary for all paths to return a value\n\n\n  return;\n} // from the current swap inputs, compute the best trade and return it.\n\nexport function useDerivedSwapInfo() {\n  var _ref, _ref2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const toggledVersion = useToggledVersion();\n  const {\n    t\n  } = useTranslation();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  }; // get link to trade on v1, if a better rate exists\n\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount);\n  let inputError;\n\n  if (!account) {\n    inputError = t('connectWallet');\n  }\n\n  if (!parsedAmount) {\n    var _inputError;\n\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : t('enterAnAmount');\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : t('selectAToken');\n  }\n\n  if (!to) {\n    var _inputError3;\n\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : t('enterARecipient');\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n  const slippageAdjustedAmountsV1 = v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage); // compare input balance to max input based on version\n\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], toggledVersion === Version.v1 ? slippageAdjustedAmountsV1 ? slippageAdjustedAmountsV1[Field.INPUT] : null : slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError,\n    v1Trade\n  };\n}\n\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _BNB;\n\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB';\n    if (valid === false) return 'BNB';\n  }\n\n  return (_BNB = 'BNB') !== null && _BNB !== void 0 ? _BNB : '';\n}\n\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\n\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\n\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n} // updates the swap state to use the defaults for a given network\n\nexport function useDefaultsFromURLSearch() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    })); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/swap/hooks.ts"],"names":["useENS","Version","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useDispatch","useSelector","useV1Trade","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useToggledVersion","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useTranslation","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","useDerivedSwapInfo","account","toggledVersion","t","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","undefined","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","v1Trade","inputError","allowedSlippage","slippageAdjustedAmounts","slippageAdjustedAmountsV1","balanceIn","amountIn","v1","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","parsed"],"mappings":"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","sourcesContent":["import useENS from '../../hooks/useENS'\nimport { Version } from '../../hooks/useToggledVersion'\nimport { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@bscswap/sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useV1Trade } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport useToggledVersion from '../../hooks/useToggledVersion'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\nimport { useTranslation } from 'react-i18next'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : ''\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n  v1Trade: Trade | undefined\n} {\n  const { account } = useActiveWeb3React()\n\n  const toggledVersion = useToggledVersion()\n\n  const { t } = useTranslation()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined\n  }\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount)\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t('connectWallet');\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t('enterAnAmount');\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t('selectAToken');\n  }\n\n  if (!to) {\n    inputError = inputError ?? t('enterARecipient');\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  const slippageAdjustedAmountsV1 =\n    v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    toggledVersion === Version.v1\n      ? slippageAdjustedAmountsV1\n        ? slippageAdjustedAmountsV1[Field.INPUT]\n        : null\n      : slippageAdjustedAmounts\n      ? slippageAdjustedAmounts[Field.INPUT]\n      : null\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance'\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n    v1Trade\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return 'BNB' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient\n      })\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n}\n"]},"metadata":{},"sourceType":"module"}