{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{addTransaction}from'./actions';// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var dispatch=useDispatch();return useCallback(function(response){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},summary=_ref.summary,approval=_ref.approval;if(!account)return;if(!chainId)return;var hash=response.hash;if(!hash){throw Error('No transaction hash found.');}dispatch(addTransaction({hash:hash,from:account,chainId:chainId,approval:approval,summary:summary}));},[dispatch,chainId,account]);}// returns all the transactions for the current chain\nexport function useAllTransactions(){var _state$chainId;var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var state=useSelector(function(state){return state.transactions;});return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};}export function useIsTransactionPending(transactionHash){var transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return!transactions[transactionHash].receipt;}// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress,spender){var allTransactions=useAllTransactions();return useMemo(function(){return typeof tokenAddress==='string'&&typeof spender==='string'&&Object.keys(allTransactions).some(function(hash){var _allTransactions$hash;if((_allTransactions$hash=allTransactions[hash])===null||_allTransactions$hash===void 0?void 0:_allTransactions$hash.receipt){return false;}else{var _allTransactions$hash2,_allTransactions$hash3,_allTransactions$hash4,_allTransactions$hash5;return((_allTransactions$hash2=allTransactions[hash])===null||_allTransactions$hash2===void 0?void 0:(_allTransactions$hash3=_allTransactions$hash2.approval)===null||_allTransactions$hash3===void 0?void 0:_allTransactions$hash3.tokenAddress)===tokenAddress&&((_allTransactions$hash4=allTransactions[hash])===null||_allTransactions$hash4===void 0?void 0:(_allTransactions$hash5=_allTransactions$hash4.approval)===null||_allTransactions$hash5===void 0?void 0:_allTransactions$hash5.spender)===spender;}});},[allTransactions,spender,tokenAddress]);}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/transactions/hooks.tsx"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","hash","Error","from","useAllTransactions","state","transactions","useIsTransactionPending","transactionHash","receipt","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some"],"mappings":"AACA,OAASA,WAAT,CAAsBC,OAAtB,KAAqC,OAArC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,OAASC,kBAAT,KAAmC,aAAnC,CAEA,OAASC,cAAT,KAA+B,WAA/B,CAGA;AACA,MAAO,SAASC,CAAAA,mBAAT,EAGG,yBACqBF,kBAAkB,EADvC,CACAG,OADA,qBACAA,OADA,CACSC,OADT,qBACSA,OADT,CAER,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CAEA,MAAOF,CAAAA,WAAW,CAChB,SACEU,QADF,CAGK,oEADiG,EACjG,CADDC,OACC,MADDA,OACC,CADQC,QACR,MADQA,QACR,CACH,GAAI,CAACJ,OAAL,CAAc,OACd,GAAI,CAACD,OAAL,CAAc,OAFX,GAIKM,CAAAA,IAJL,CAIcH,QAJd,CAIKG,IAJL,CAKH,GAAI,CAACA,IAAL,CAAW,CACT,KAAMC,CAAAA,KAAK,CAAC,4BAAD,CAAX,CACD,CACDL,QAAQ,CAACJ,cAAc,CAAC,CAAEQ,IAAI,CAAJA,IAAF,CAAQE,IAAI,CAAEP,OAAd,CAAuBD,OAAO,CAAPA,OAAvB,CAAgCK,QAAQ,CAARA,QAAhC,CAA0CD,OAAO,CAAPA,OAA1C,CAAD,CAAf,CAAR,CACD,CAbe,CAchB,CAACF,QAAD,CAAWF,OAAX,CAAoBC,OAApB,CAdgB,CAAlB,CAgBD,CAED;AACA,MAAO,SAASQ,CAAAA,kBAAT,EAAwE,6CACzDZ,kBAAkB,EADuC,CACrEG,OADqE,sBACrEA,OADqE,CAG7E,GAAMU,CAAAA,KAAK,CAAGd,WAAW,CAAqC,SAAAc,KAAK,QAAIA,CAAAA,KAAK,CAACC,YAAV,EAA1C,CAAzB,CAEA,MAAOX,CAAAA,OAAO,iBAAGU,KAAK,CAACV,OAAD,CAAR,iDAAqB,EAArB,CAA0B,EAAxC,CACD,CAED,MAAO,SAASY,CAAAA,uBAAT,CAAiCC,eAAjC,CAAoE,CACzE,GAAMF,CAAAA,YAAY,CAAGF,kBAAkB,EAAvC,CAEA,GAAI,CAACI,eAAD,EAAoB,CAACF,YAAY,CAACE,eAAD,CAArC,CAAwD,MAAO,MAAP,CAExD,MAAO,CAACF,YAAY,CAACE,eAAD,CAAZ,CAA8BC,OAAtC,CACD,CAED;AACA,MAAO,SAASC,CAAAA,qBAAT,CAA+BC,YAA/B,CAAiEC,OAAjE,CAAuG,CAC5G,GAAMC,CAAAA,eAAe,CAAGT,kBAAkB,EAA1C,CACA,MAAOf,CAAAA,OAAO,CACZ,iBACE,OAAOsB,CAAAA,YAAP,GAAwB,QAAxB,EACA,MAAOC,CAAAA,OAAP,GAAmB,QADnB,EAEAE,MAAM,CAACC,IAAP,CAAYF,eAAZ,EAA6BG,IAA7B,CAAkC,SAAAf,IAAI,CAAI,2BACxC,0BAAIY,eAAe,CAACZ,IAAD,CAAnB,gDAAI,sBAAuBQ,OAA3B,CAAoC,CAClC,MAAO,MAAP,CACD,CAFD,IAEO,iGACL,MACE,yBAAAI,eAAe,CAACZ,IAAD,CAAf,gGAAuBD,QAAvB,wEAAiCW,YAAjC,IAAkDA,YAAlD,EACA,yBAAAE,eAAe,CAACZ,IAAD,CAAf,gGAAuBD,QAAvB,wEAAiCY,OAAjC,IAA6CA,OAF/C,CAID,CACF,CATD,CAHF,EADY,CAcZ,CAACC,eAAD,CAAkBD,OAAlB,CAA2BD,YAA3B,CAdY,CAAd,CAgBD","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        if (allTransactions[hash]?.receipt) {\n          return false\n        } else {\n          return (\n            allTransactions[hash]?.approval?.tokenAddress === tokenAddress &&\n            allTransactions[hash]?.approval?.spender === spender\n          )\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}