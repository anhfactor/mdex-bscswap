{"ast":null,"code":"/**\n * Given a URI that may be ipfs, or http, or an ENS name, return the fetchable http(s) URLs for the same content\n * @param uri to convert to http url\n */export default function uriToHttp(uri){try{var parsed=new URL(uri);if(parsed.protocol==='http:'){return['https'+uri.substr(4),uri];}else if(parsed.protocol==='https:'){return[uri];}else if(parsed.protocol==='ipfs:'){var _parsed$href$match;var hash=(_parsed$href$match=parsed.href.match(/^ipfs:(\\/\\/)?(.*)$/))===null||_parsed$href$match===void 0?void 0:_parsed$href$match[2];return[\"https://cloudflare-ipfs.com/ipfs/\".concat(hash,\"/\"),\"https://ipfs.io/ipfs/\".concat(hash,\"/\")];}else if(parsed.protocol==='ipns:'){var _parsed$href$match2;var name=(_parsed$href$match2=parsed.href.match(/^ipns:(\\/\\/)?(.*)$/))===null||_parsed$href$match2===void 0?void 0:_parsed$href$match2[2];return[\"https://cloudflare-ipfs.com/ipns/\".concat(name,\"/\"),\"https://ipfs.io/ipns/\".concat(name,\"/\")];}else{return[];}}catch(error){if(uri.toLowerCase().endsWith('.eth')){return[\"https://\".concat(uri.toLowerCase(),\".link\")];}return[];}}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/bscswap-interface/src/utils/uriToHttp.ts"],"names":["uriToHttp","uri","parsed","URL","protocol","substr","hash","href","match","name","error","toLowerCase","endsWith"],"mappings":"AAAA;;;GAIA,cAAe,SAASA,CAAAA,SAAT,CAAmBC,GAAnB,CAA0C,CACvD,GAAI,CACF,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,GAAJ,CAAQF,GAAR,CAAf,CACA,GAAIC,MAAM,CAACE,QAAP,GAAoB,OAAxB,CAAiC,CAC/B,MAAO,CAAC,QAAUH,GAAG,CAACI,MAAJ,CAAW,CAAX,CAAX,CAA0BJ,GAA1B,CAAP,CACD,CAFD,IAEO,IAAIC,MAAM,CAACE,QAAP,GAAoB,QAAxB,CAAkC,CACvC,MAAO,CAACH,GAAD,CAAP,CACD,CAFM,IAEA,IAAIC,MAAM,CAACE,QAAP,GAAoB,OAAxB,CAAiC,wBACtC,GAAME,CAAAA,IAAI,qBAAGJ,MAAM,CAACK,IAAP,CAAYC,KAAZ,CAAkB,oBAAlB,CAAH,6CAAG,mBAA0C,CAA1C,CAAb,CACA,MAAO,4CAAqCF,IAArC,qCAAsEA,IAAtE,MAAP,CACD,CAHM,IAGA,IAAIJ,MAAM,CAACE,QAAP,GAAoB,OAAxB,CAAiC,yBACtC,GAAMK,CAAAA,IAAI,sBAAGP,MAAM,CAACK,IAAP,CAAYC,KAAZ,CAAkB,oBAAlB,CAAH,8CAAG,oBAA0C,CAA1C,CAAb,CACA,MAAO,4CAAqCC,IAArC,qCAAsEA,IAAtE,MAAP,CACD,CAHM,IAGA,CACL,MAAO,EAAP,CACD,CACF,CAAC,MAAOC,KAAP,CAAc,CACd,GAAIT,GAAG,CAACU,WAAJ,GAAkBC,QAAlB,CAA2B,MAA3B,CAAJ,CAAwC,CACtC,MAAO,mBAAYX,GAAG,CAACU,WAAJ,EAAZ,UAAP,CACD,CACD,MAAO,EAAP,CACD,CACF","sourcesContent":["/**\n * Given a URI that may be ipfs, or http, or an ENS name, return the fetchable http(s) URLs for the same content\n * @param uri to convert to http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  try {\n    const parsed = new URL(uri)\n    if (parsed.protocol === 'http:') {\n      return ['https' + uri.substr(4), uri]\n    } else if (parsed.protocol === 'https:') {\n      return [uri]\n    } else if (parsed.protocol === 'ipfs:') {\n      const hash = parsed.href.match(/^ipfs:(\\/\\/)?(.*)$/)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    } else if (parsed.protocol === 'ipns:') {\n      const name = parsed.href.match(/^ipns:(\\/\\/)?(.*)$/)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    } else {\n      return []\n    }\n  } catch (error) {\n    if (uri.toLowerCase().endsWith('.eth')) {\n      return [`https://${uri.toLowerCase()}.link`]\n    }\n    return []\n  }\n}\n"]},"metadata":{},"sourceType":"module"}