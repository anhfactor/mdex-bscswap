{"ast":null,"code":"import _slicedToArray from\"/Users/lap14205/Documents/home/blockchain_learning/bscswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useState}from'react';var VISIBILITY_STATE_SUPPORTED=('visibilityState'in document);function isWindowVisible(){return!VISIBILITY_STATE_SUPPORTED||document.visibilityState!=='hidden';}/**\n * Returns whether the window is currently visible to the user.\n */export default function useIsWindowVisible(){var _useState=useState(isWindowVisible()),_useState2=_slicedToArray(_useState,2),focused=_useState2[0],setFocused=_useState2[1];var listener=useCallback(function(){setFocused(isWindowVisible());},[setFocused]);useEffect(function(){if(!VISIBILITY_STATE_SUPPORTED)return;document.addEventListener('visibilitychange',listener);return function(){document.removeEventListener('visibilitychange',listener);};},[listener]);return focused;}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/bscswap-interface/src/hooks/useIsWindowVisible.ts"],"names":["useCallback","useEffect","useState","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","useIsWindowVisible","focused","setFocused","listener","addEventListener","removeEventListener"],"mappings":"2LAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CAEA,GAAMC,CAAAA,0BAA0B,EAAG,mBAAqBC,CAAAA,QAAxB,CAAhC,CAEA,QAASC,CAAAA,eAAT,EAA2B,CACzB,MAAO,CAACF,0BAAD,EAA+BC,QAAQ,CAACE,eAAT,GAA6B,QAAnE,CACD,CAED;;GAGA,cAAe,SAASC,CAAAA,kBAAT,EAAuC,eACtBL,QAAQ,CAAUG,eAAe,EAAzB,CADc,wCAC7CG,OAD6C,eACpCC,UADoC,eAEpD,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,CAAC,UAAM,CACjCS,UAAU,CAACJ,eAAe,EAAhB,CAAV,CACD,CAF2B,CAEzB,CAACI,UAAD,CAFyB,CAA5B,CAIAR,SAAS,CAAC,UAAM,CACd,GAAI,CAACE,0BAAL,CAAiC,OAEjCC,QAAQ,CAACO,gBAAT,CAA0B,kBAA1B,CAA8CD,QAA9C,EACA,MAAO,WAAM,CACXN,QAAQ,CAACQ,mBAAT,CAA6B,kBAA7B,CAAiDF,QAAjD,EACD,CAFD,CAGD,CAPQ,CAON,CAACA,QAAD,CAPM,CAAT,CASA,MAAOF,CAAAA,OAAP,CACD","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden'\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible())\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible())\n  }, [setFocused])\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return\n\n    document.addEventListener('visibilitychange', listener)\n    return () => {\n      document.removeEventListener('visibilitychange', listener)\n    }\n  }, [listener])\n\n  return focused\n}\n"]},"metadata":{},"sourceType":"module"}