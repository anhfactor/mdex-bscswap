{"ast":null,"code":"import _objectSpread from\"/Users/lap14205/Documents/home/blockchain_learning/bscswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{getVersionUpgrade,VersionUpgrade}from'@uniswap/token-lists';import{updateVersion}from'../user/actions';import{acceptListUpdate,addList,fetchTokenList}from'./actions';var initialState={byUrl:{}};export default createReducer(initialState,function(builder){return builder.addCase(fetchTokenList.pending,function(state,_ref){var _ref$meta=_ref.meta,url=_ref$meta.arg,requestId=_ref$meta.requestId;state.byUrl[url]=_objectSpread(_objectSpread({current:null,pendingUpdate:null},state.byUrl[url]),{},{loadingRequestId:requestId,error:null});}).addCase(fetchTokenList.fulfilled,function(state,_ref2){var _state$byUrl$url;var tokenList=_ref2.payload,url=_ref2.meta.arg;var current=(_state$byUrl$url=state.byUrl[url])===null||_state$byUrl$url===void 0?void 0:_state$byUrl$url.current;// no-op if update does nothing\nif(current){var type=getVersionUpgrade(current.version,tokenList.version);if(type===VersionUpgrade.NONE)return;state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:null,current:current,pendingUpdate:tokenList});}else{state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:null,current:tokenList,pendingUpdate:null});}}).addCase(fetchTokenList.rejected,function(state,_ref3){var _state$byUrl$url2,_error$message;var error=_ref3.error,_ref3$meta=_ref3.meta,requestId=_ref3$meta.requestId,url=_ref3$meta.arg;if(((_state$byUrl$url2=state.byUrl[url])===null||_state$byUrl$url2===void 0?void 0:_state$byUrl$url2.loadingRequestId)!==requestId){// no-op since it's not the latest request\nreturn;}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:(_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'Unknown error',current:null,pendingUpdate:null});}).addCase(addList,function(state,_ref4){var url=_ref4.payload;if(!state.byUrl[url]){state.byUrl[url]={loadingRequestId:null,pendingUpdate:null,current:null,error:null};}}).addCase(acceptListUpdate,function(state,_ref5){var _state$byUrl$url3;var url=_ref5.payload;if(!((_state$byUrl$url3=state.byUrl[url])===null||_state$byUrl$url3===void 0?void 0:_state$byUrl$url3.pendingUpdate)){throw new Error('accept list update called without pending update');}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{pendingUpdate:null,current:state.byUrl[url].pendingUpdate});}).addCase(updateVersion,function(state){delete state.byUrl['https://tokens.bscswap.com/tokens.json'];});});","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/bscswap-interface/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","updateVersion","acceptListUpdate","addList","fetchTokenList","initialState","byUrl","builder","addCase","pending","state","meta","url","arg","requestId","current","pendingUpdate","loadingRequestId","error","fulfilled","tokenList","payload","type","version","NONE","rejected","message","Error"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { TokenList } from '@uniswap/token-lists/dist/types'\nimport { updateVersion } from '../user/actions'\nimport { acceptListUpdate, addList, fetchTokenList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n}\n\nconst initialState: ListsState = {\n  byUrl: {}\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { meta: { arg: url, requestId } }) => {\n      state.byUrl[url] = {\n        current: null,\n        pendingUpdate: null,\n        ...state.byUrl[url],\n        loadingRequestId: requestId,\n        error: null\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: tokenList, meta: { arg: url } }) => {\n      const current = state.byUrl[url]?.current\n\n      // no-op if update does nothing\n      if (current) {\n        const type = getVersionUpgrade(current.version, tokenList.version)\n        if (type === VersionUpgrade.NONE) return\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: current,\n          pendingUpdate: tokenList\n        }\n      } else {\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: tokenList,\n          pendingUpdate: null\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { error, meta: { requestId, arg: url } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: null,\n        error: error.message ?? 'Unknown error',\n        current: null,\n        pendingUpdate: null\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = {\n          loadingRequestId: null,\n          pendingUpdate: null,\n          current: null,\n          error: null\n        }\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate\n      }\n    })\n    .addCase(updateVersion, state => {\n      delete state.byUrl['https://tokens.bscswap.com/tokens.json']\n    })\n)\n"]},"metadata":{},"sourceType":"module"}