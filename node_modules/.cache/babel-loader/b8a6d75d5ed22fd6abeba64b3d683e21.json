{"ast":null,"code":"import{Contract}from'@ethersproject/contracts';import{getAddress}from'@ethersproject/address';import{AddressZero}from'@ethersproject/constants';import{BigNumber}from'@ethersproject/bignumber';import{abi as IBSCswapRouter02ABI}from'@bscswap/contracts/build/IBSCswapRouter02.json';import{ROUTER_ADDRESS}from'../constants';import{JSBI,Percent,Token,ETHER}from'@bscswap/sdk';// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value){try{return getAddress(value);}catch(_unused){return false;}}var ETHERSCAN_PREFIXES={1:'etherscan.io',3:'ropsten.etherscan.io',4:'rinkeby.etherscan.io',5:'goerli.etherscan.io',42:'kovan.etherscan.io',56:'bscscan.com',97:'testnet.bscscan.com'};var ANALYSIS_PREFIXES={1:'',3:'',4:'',5:'',42:'',56:'',97:'testnet.'};export function getEtherscanLink(chainId,data,type){var prefix=\"https://\".concat(ETHERSCAN_PREFIXES[chainId]||ETHERSCAN_PREFIXES[1]);switch(type){case'transaction':{return\"\".concat(prefix,\"/tx/\").concat(data);}case'token':{return\"\".concat(prefix,\"/token/\").concat(data);}case'address':default:{return\"\".concat(prefix,\"/address/\").concat(data);}}}export function getAnalysisLink(chainId){return\"https://\".concat(ANALYSIS_PREFIXES[chainId]||ANALYSIS_PREFIXES[1],\"bscswap.info\");}// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address){var chars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;var parsed=isAddress(address);if(!parsed){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return\"\".concat(parsed.substring(0,chars+2),\"...\").concat(parsed.substring(42-chars));}// add 10%\nexport function calculateGasMargin(value){return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));}// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num){return new Percent(JSBI.BigInt(num),JSBI.BigInt(10000));}export function calculateSlippageAmount(value,slippage){if(slippage<0||slippage>10000){throw Error(\"Unexpected slippage value: \".concat(slippage));}return[JSBI.divide(JSBI.multiply(value.raw,JSBI.BigInt(10000-slippage)),JSBI.BigInt(10000)),JSBI.divide(JSBI.multiply(value.raw,JSBI.BigInt(10000+slippage)),JSBI.BigInt(10000))];}// account is not optional\nexport function getSigner(library,account){return library.getSigner(account).connectUnchecked();}// account is optional\nexport function getProviderOrSigner(library,account){return account?getSigner(library,account):library;}// account is optional\nexport function getContract(address,ABI,library,account){if(!isAddress(address)||address===AddressZero){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return new Contract(address,ABI,getProviderOrSigner(library,account));}// account is optional\nexport function getRouterContract(_,library,account){return getContract(ROUTER_ADDRESS,IBSCswapRouter02ABI,library,account);}export function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&');// $& means the whole matched string\n}export function isDefaultToken(defaultTokens,currency){var _defaultTokens$curren;if(currency===ETHER)return true;return Boolean(currency instanceof Token&&((_defaultTokens$curren=defaultTokens[currency.chainId])===null||_defaultTokens$curren===void 0?void 0:_defaultTokens$curren[currency.address]));}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/utils/index.ts"],"names":["Contract","getAddress","AddressZero","BigNumber","abi","IBSCswapRouter02ABI","ROUTER_ADDRESS","JSBI","Percent","Token","ETHER","isAddress","value","ETHERSCAN_PREFIXES","ANALYSIS_PREFIXES","getEtherscanLink","chainId","data","type","prefix","getAnalysisLink","shortenAddress","address","chars","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","getRouterContract","_","escapeRegExp","string","replace","isDefaultToken","defaultTokens","currency","Boolean"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { abi as IBSCswapRouter02ABI } from '@bscswap/contracts/build/IBSCswapRouter02.json'\nimport { ROUTER_ADDRESS } from '../constants'\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@bscswap/sdk'\nimport { TokenAddressMap } from '../state/lists/hooks'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: 'etherscan.io',\n  3: 'ropsten.etherscan.io',\n  4: 'rinkeby.etherscan.io',\n  5: 'goerli.etherscan.io',\n  42: 'kovan.etherscan.io',\n  56: 'bscscan.com',\n  97: 'testnet.bscscan.com'\n}\n\nconst ANALYSIS_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  3: '',\n  4: '',\n  5: '',\n  42: '',\n  56: '',\n  97: 'testnet.'\n}\n\nexport function getEtherscanLink(chainId: ChainId, data: string, type: 'transaction' | 'token' | 'address'): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\nexport function getAnalysisLink(chainId: ChainId): string {\n  return `https://${ANALYSIS_PREFIXES[chainId] || ANALYSIS_PREFIXES[1]}bscswap.info`\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\n// account is optional\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\n  return getContract(ROUTER_ADDRESS, IBSCswapRouter02ABI, library, account)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function isDefaultToken(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\n  if (currency === ETHER) return true\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\n}\n"]},"metadata":{},"sourceType":"module"}