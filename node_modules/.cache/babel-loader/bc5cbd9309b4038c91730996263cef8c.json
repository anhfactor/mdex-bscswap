{"ast":null,"code":"import{getVersionUpgrade,VersionUpgrade}from'@uniswap/token-lists';import{useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{DEFAULT_TOKEN_LIST_URL}from'../../constants';import{addPopup}from'../application/actions';import{acceptListUpdate,addList,fetchTokenList}from'./actions';export default function Updater(){var dispatch=useDispatch();var lists=useSelector(function(state){return state.lists.byUrl;});// we should always fetch the default token list, so add it\nuseEffect(function(){if(!lists[DEFAULT_TOKEN_LIST_URL])dispatch(addList(DEFAULT_TOKEN_LIST_URL));},[dispatch,lists]);// on initial mount, refetch all the lists in storage\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){return dispatch(fetchTokenList(listUrl));});// we only do this once\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch]);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){dispatch(fetchTokenList(listUrl));}});},[dispatch,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);switch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');case VersionUpgrade.PATCH:case VersionUpgrade.MINOR:case VersionUpgrade.MAJOR:// const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n// automatically update minor/patch as long as bump matches the min update\n//if (bump >= min) {\ndispatch(acceptListUpdate(listUrl));dispatch(addPopup({key:listUrl,content:{listUpdate:{listUrl:listUrl,oldList:list.current,newList:list.pendingUpdate,auto:true}}}));//} else {\n//  console.error(\n//    `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n//  )\n//}\nbreak;// this will be turned on later\n// case VersionUpgrade.MAJOR:\n// dispatch(\n//   addPopup({\n//     key: listUrl,\n//     content: {\n//       listUpdate: {\n//         listUrl,\n//         auto: false,\n//         oldList: list.current,\n//         newList: list.pendingUpdate\n//       }\n//     }\n//   })\n// )\n}}});},[dispatch,lists]);return null;}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/lists/updater.ts"],"names":["getVersionUpgrade","VersionUpgrade","useEffect","useDispatch","useSelector","DEFAULT_TOKEN_LIST_URL","addPopup","acceptListUpdate","addList","fetchTokenList","Updater","dispatch","lists","state","byUrl","Object","keys","forEach","listUrl","list","current","loadingRequestId","error","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR","key","content","listUpdate","oldList","newList","auto"],"mappings":"AAAA,OAASA,iBAAT,CAA4BC,cAA5B,KAAkD,sBAAlD,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,sBAAT,KAAuC,iBAAvC,CACA,OAASC,QAAT,KAAyB,wBAAzB,CAEA,OAASC,gBAAT,CAA2BC,OAA3B,CAAoCC,cAApC,KAA0D,WAA1D,CAEA,cAAe,SAASC,CAAAA,OAAT,EAAyB,CACtC,GAAMC,CAAAA,QAAQ,CAAGR,WAAW,EAA5B,CACA,GAAMS,CAAAA,KAAK,CAAGR,WAAW,CAAuC,SAAAS,KAAK,QAAIA,CAAAA,KAAK,CAACD,KAAN,CAAYE,KAAhB,EAA5C,CAAzB,CAEA;AACAZ,SAAS,CAAC,UAAM,CACd,GAAI,CAACU,KAAK,CAACP,sBAAD,CAAV,CAAoCM,QAAQ,CAACH,OAAO,CAACH,sBAAD,CAAR,CAAR,CACrC,CAFQ,CAEN,CAACM,QAAD,CAAWC,KAAX,CAFM,CAAT,CAIA;AACAV,SAAS,CAAC,UAAM,CACda,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,OAAnB,CAA2B,SAAAC,OAAO,QAAIP,CAAAA,QAAQ,CAACF,cAAc,CAACS,OAAD,CAAf,CAAZ,EAAlC,EACA;AACA;AACD,CAJQ,CAIN,CAACP,QAAD,CAJM,CAAT,CAMA;AACAT,SAAS,CAAC,UAAM,CACda,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,OAAnB,CAA2B,SAAAC,OAAO,CAAI,CACpC,GAAMC,CAAAA,IAAI,CAAGP,KAAK,CAACM,OAAD,CAAlB,CACA,GAAI,CAACC,IAAI,CAACC,OAAN,EAAiB,CAACD,IAAI,CAACE,gBAAvB,EAA2C,CAACF,IAAI,CAACG,KAArD,CAA4D,CAC1DX,QAAQ,CAACF,cAAc,CAACS,OAAD,CAAf,CAAR,CACD,CACF,CALD,EAMD,CAPQ,CAON,CAACP,QAAD,CAAWC,KAAX,CAPM,CAAT,CASA;AACAV,SAAS,CAAC,UAAM,CACda,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,OAAnB,CAA2B,SAAAC,OAAO,CAAI,CACpC,GAAMC,CAAAA,IAAI,CAAGP,KAAK,CAACM,OAAD,CAAlB,CACA,GAAIC,IAAI,CAACC,OAAL,EAAgBD,IAAI,CAACI,aAAzB,CAAwC,CACtC,GAAMC,CAAAA,IAAI,CAAGxB,iBAAiB,CAACmB,IAAI,CAACC,OAAL,CAAaK,OAAd,CAAuBN,IAAI,CAACI,aAAL,CAAmBE,OAA1C,CAA9B,CACA,OAAQD,IAAR,EACE,IAAKvB,CAAAA,cAAc,CAACyB,IAApB,CACE,KAAM,IAAIC,CAAAA,KAAJ,CAAU,4BAAV,CAAN,CACF,IAAK1B,CAAAA,cAAc,CAAC2B,KAApB,CACA,IAAK3B,CAAAA,cAAc,CAAC4B,KAApB,CACA,IAAK5B,CAAAA,cAAc,CAAC6B,KAApB,CACE;AACA;AACA;AACEnB,QAAQ,CAACJ,gBAAgB,CAACW,OAAD,CAAjB,CAAR,CACAP,QAAQ,CACNL,QAAQ,CAAC,CACPyB,GAAG,CAAEb,OADE,CAEPc,OAAO,CAAE,CACPC,UAAU,CAAE,CACVf,OAAO,CAAPA,OADU,CAEVgB,OAAO,CAAEf,IAAI,CAACC,OAFJ,CAGVe,OAAO,CAAEhB,IAAI,CAACI,aAHJ,CAIVa,IAAI,CAAE,IAJI,CADL,CAFF,CAAD,CADF,CAAR,CAaF;AACA;AACA;AACA;AACA;AACA,MAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CF,CA8CD,CACF,CAnDD,EAoDD,CArDQ,CAqDN,CAACzB,QAAD,CAAWC,KAAX,CArDM,CAAT,CAuDA,MAAO,KAAP,CACD","sourcesContent":["import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DEFAULT_TOKEN_LIST_URL } from '../../constants'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate, addList, fetchTokenList } from './actions'\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n\n  // we should always fetch the default token list, so add it\n  useEffect(() => {\n    if (!lists[DEFAULT_TOKEN_LIST_URL]) dispatch(addList(DEFAULT_TOKEN_LIST_URL))\n  }, [dispatch, lists])\n\n  // on initial mount, refetch all the lists in storage\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => dispatch(fetchTokenList(listUrl) as any))\n    // we only do this once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch])\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        dispatch(fetchTokenList(listUrl) as any)\n      }\n    })\n  }, [dispatch, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            // const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            //if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      oldList: list.current,\n                      newList: list.pendingUpdate,\n                      auto: true\n                    }\n                  }\n                })\n              )\n            //} else {\n            //  console.error(\n            //    `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n            //  )\n            //}\n            break\n\n          // this will be turned on later\n          // case VersionUpgrade.MAJOR:\n          // dispatch(\n          //   addPopup({\n          //     key: listUrl,\n          //     content: {\n          //       listUpdate: {\n          //         listUrl,\n          //         auto: false,\n          //         oldList: list.current,\n          //         newList: list.pendingUpdate\n          //       }\n          //     }\n          //   })\n          // )\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}