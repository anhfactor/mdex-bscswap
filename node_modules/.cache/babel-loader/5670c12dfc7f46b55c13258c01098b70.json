{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { updateVersion } from '../user/actions';\nimport { acceptListUpdate, addList, fetchTokenList } from './actions';\nconst initialState = {\n  byUrl: {}\n};\nexport default createReducer(initialState, builder => builder.addCase(fetchTokenList.pending, (state, {\n  meta: {\n    arg: url,\n    requestId\n  }\n}) => {\n  state.byUrl[url] = {\n    current: null,\n    pendingUpdate: null,\n    ...state.byUrl[url],\n    loadingRequestId: requestId,\n    error: null\n  };\n}).addCase(fetchTokenList.fulfilled, (state, {\n  payload: tokenList,\n  meta: {\n    arg: url\n  }\n}) => {\n  var _state$byUrl$url;\n\n  const current = (_state$byUrl$url = state.byUrl[url]) === null || _state$byUrl$url === void 0 ? void 0 : _state$byUrl$url.current; // no-op if update does nothing\n\n  if (current) {\n    const type = getVersionUpgrade(current.version, tokenList.version);\n    if (type === VersionUpgrade.NONE) return;\n    state.byUrl[url] = { ...state.byUrl[url],\n      loadingRequestId: null,\n      error: null,\n      current: current,\n      pendingUpdate: tokenList\n    };\n  } else {\n    state.byUrl[url] = { ...state.byUrl[url],\n      loadingRequestId: null,\n      error: null,\n      current: tokenList,\n      pendingUpdate: null\n    };\n  }\n}).addCase(fetchTokenList.rejected, (state, {\n  error,\n  meta: {\n    requestId,\n    arg: url\n  }\n}) => {\n  var _state$byUrl$url2, _error$message;\n\n  if (((_state$byUrl$url2 = state.byUrl[url]) === null || _state$byUrl$url2 === void 0 ? void 0 : _state$byUrl$url2.loadingRequestId) !== requestId) {\n    // no-op since it's not the latest request\n    return;\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    loadingRequestId: null,\n    error: (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'Unknown error',\n    current: null,\n    pendingUpdate: null\n  };\n}).addCase(addList, (state, {\n  payload: url\n}) => {\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = {\n      loadingRequestId: null,\n      pendingUpdate: null,\n      current: null,\n      error: null\n    };\n  }\n}).addCase(acceptListUpdate, (state, {\n  payload: url\n}) => {\n  var _state$byUrl$url3;\n\n  if (!((_state$byUrl$url3 = state.byUrl[url]) === null || _state$byUrl$url3 === void 0 ? void 0 : _state$byUrl$url3.pendingUpdate)) {\n    throw new Error('accept list update called without pending update');\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    pendingUpdate: null,\n    current: state.byUrl[url].pendingUpdate\n  };\n}).addCase(updateVersion, state => {\n  delete state.byUrl['https://tokens.bscswap.com/tokens.json'];\n}));","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","updateVersion","acceptListUpdate","addList","fetchTokenList","initialState","byUrl","builder","addCase","pending","state","meta","arg","url","requestId","current","pendingUpdate","loadingRequestId","error","fulfilled","payload","tokenList","type","version","NONE","rejected","message","Error"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { TokenList } from '@uniswap/token-lists/dist/types'\nimport { updateVersion } from '../user/actions'\nimport { acceptListUpdate, addList, fetchTokenList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n}\n\nconst initialState: ListsState = {\n  byUrl: {}\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { meta: { arg: url, requestId } }) => {\n      state.byUrl[url] = {\n        current: null,\n        pendingUpdate: null,\n        ...state.byUrl[url],\n        loadingRequestId: requestId,\n        error: null\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: tokenList, meta: { arg: url } }) => {\n      const current = state.byUrl[url]?.current\n\n      // no-op if update does nothing\n      if (current) {\n        const type = getVersionUpgrade(current.version, tokenList.version)\n        if (type === VersionUpgrade.NONE) return\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: current,\n          pendingUpdate: tokenList\n        }\n      } else {\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: tokenList,\n          pendingUpdate: null\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { error, meta: { requestId, arg: url } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: null,\n        error: error.message ?? 'Unknown error',\n        current: null,\n        pendingUpdate: null\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = {\n          loadingRequestId: null,\n          pendingUpdate: null,\n          current: null,\n          error: null\n        }\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate\n      }\n    })\n    .addCase(updateVersion, state => {\n      delete state.byUrl['https://tokens.bscswap.com/tokens.json']\n    })\n)\n"]},"metadata":{},"sourceType":"module"}