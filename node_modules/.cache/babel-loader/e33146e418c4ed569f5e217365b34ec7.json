{"ast":null,"code":"import { ChainId, JSBI, Percent, Token, WETH } from '@bscswap/sdk'; // import { injected, binanceinjected, walletconnect, walletlink } from '../connectors'\n\nimport { injected, binanceinjected } from '../connectors';\nexport const ROUTER_ADDRESS = '0xd954551853F55deb4Ae31407c423e67B1621424A'; // a list of tokens by chain\n\nexport const DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin');\nexport const USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD//C');\nexport const USDT = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD');\nexport const COMP = new Token(ChainId.MAINNET, '0xc00e94Cb662C3520282E6f5717214004A7f26888', 18, 'COMP', 'Compound');\nexport const MKR = new Token(ChainId.MAINNET, '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', 18, 'MKR', 'Maker');\nexport const AMPL = new Token(ChainId.MAINNET, '0xD46bA6D942050d489DBd938a2C909A5d5039A161', 9, 'AMPL', 'Ampleforth');\nexport const BAI = new Token(ChainId.BSC_MAINNET, '0xaA8012a0Ea627767545a8E435C2A2BD51f60173D', 18, 'BAI', 'BAI Stablecoin');\nexport const B_DAI = new Token(ChainId.BSC_MAINNET, '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3', 18, 'DAI', 'Dai Token');\nexport const BUSD = new Token(ChainId.BSC_MAINNET, '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18, 'BUSD', 'BUSD Token');\nexport const B_USDT = new Token(ChainId.BSC_MAINNET, '0x55d398326f99059fF775485246999027B3197955', 18, 'USDT', 'Tether USD');\nexport const T_DAI = new Token(ChainId.BSC_TESTNET, '0xEC5dCb5Dbf4B114C9d0F65BcCAb49EC54F6A0867', 18, 'DAI', 'Dai Token');\nexport const T_BUSD = new Token(ChainId.BSC_TESTNET, '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee', 6, 'BUSD', 'BUSD Token');\nexport const T_USDT = new Token(ChainId.BSC_TESTNET, '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd', 6, 'USDT', 'Tether USD');\nconst WETH_ONLY = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.ROPSTEN]: [WETH[ChainId.ROPSTEN]],\n  [ChainId.RINKEBY]: [WETH[ChainId.RINKEBY]],\n  [ChainId.GÖRLI]: [WETH[ChainId.GÖRLI]],\n  [ChainId.KOVAN]: [WETH[ChainId.KOVAN]],\n  [ChainId.BSC_MAINNET]: [WETH[ChainId.BSC_MAINNET]],\n  [ChainId.BSC_TESTNET]: [WETH[ChainId.BSC_TESTNET]]\n}; // used to construct intermediary pairs for trading\n\nexport const BASES_TO_CHECK_TRADES_AGAINST = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT, COMP, MKR],\n  [ChainId.BSC_MAINNET]: [...WETH_ONLY[ChainId.BSC_MAINNET], BAI, B_USDT, BUSD, B_DAI]\n};\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\n\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT],\n  [ChainId.BSC_MAINNET]: [...WETH_ONLY[ChainId.BSC_MAINNET], BAI, B_USDT, BUSD, B_DAI],\n  [ChainId.BSC_TESTNET]: [...WETH_ONLY[ChainId.BSC_TESTNET], T_USDT, T_BUSD, T_DAI]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = { ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT],\n  [ChainId.BSC_MAINNET]: [...WETH_ONLY[ChainId.BSC_MAINNET], BAI, B_USDT, BUSD, B_DAI],\n  [ChainId.BSC_TESTNET]: [...WETH_ONLY[ChainId.BSC_TESTNET], T_USDT, T_BUSD, T_DAI]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[new Token(ChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'), new Token(ChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin')], [USDC, USDT], [DAI, USDT]]\n};\nexport const SUPPORTED_WALLETS = {\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  BINANCE: {\n    connector: binanceinjected,\n    name: 'Binance Chain Wallet',\n    iconName: 'bnb.svg',\n    description: 'A Crypto Wallet for Binance Smart Chain',\n    href: null,\n    color: '#F9A825'\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  TRUSTWALLET: {\n    connector: injected,\n    name: 'TrustWallet',\n    iconName: 'trustwallet.svg',\n    description: 'The most trusted & secure crypto wallet',\n    href: null,\n    color: '#3375BB'\n  },\n  MATHWALLET: {\n    connector: injected,\n    name: 'MathWallet',\n    iconName: 'mathwallet.svg',\n    description: 'Your Gateway to the World of Blockchain',\n    href: null,\n    color: '#000000'\n  }\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 50; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20; // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\n\nexport const MIN_ETH = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH\n\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000)); // the Uniswap Default token list lives here\n\nexport const DEFAULT_TOKEN_LIST_URL = 'https://tokens.bscswap.com/tokens.json';","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","injected","binanceinjected","ROUTER_ADDRESS","DAI","MAINNET","USDC","USDT","COMP","MKR","AMPL","BAI","BSC_MAINNET","B_DAI","BUSD","B_USDT","T_DAI","BSC_TESTNET","T_BUSD","T_USDT","WETH_ONLY","ROPSTEN","RINKEBY","GÖRLI","KOVAN","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","address","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","SUPPORTED_WALLETS","INJECTED","connector","name","iconName","description","href","color","primary","BINANCE","METAMASK","TRUSTWALLET","MATHWALLET","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate","BETTER_TRADE_LINK_THRESHOLD","DEFAULT_TOKEN_LIST_URL"],"mappings":"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","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ChainId, JSBI, Percent, Token, WETH } from '@bscswap/sdk'\n\n// import { injected, binanceinjected, walletconnect, walletlink } from '../connectors'\nimport { injected, binanceinjected} from '../connectors'\n\nexport const ROUTER_ADDRESS = '0xd954551853F55deb4Ae31407c423e67B1621424A'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin')\nexport const USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD//C')\nexport const USDT = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD')\nexport const COMP = new Token(ChainId.MAINNET, '0xc00e94Cb662C3520282E6f5717214004A7f26888', 18, 'COMP', 'Compound')\nexport const MKR = new Token(ChainId.MAINNET, '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', 18, 'MKR', 'Maker')\nexport const AMPL = new Token(ChainId.MAINNET, '0xD46bA6D942050d489DBd938a2C909A5d5039A161', 9, 'AMPL', 'Ampleforth')\n\nexport const BAI = new Token(ChainId.BSC_MAINNET, '0xaA8012a0Ea627767545a8E435C2A2BD51f60173D', 18, 'BAI', 'BAI Stablecoin')\nexport const B_DAI = new Token(ChainId.BSC_MAINNET, '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3', 18, 'DAI', 'Dai Token')\nexport const BUSD = new Token(ChainId.BSC_MAINNET, '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18, 'BUSD', 'BUSD Token')\nexport const B_USDT = new Token(ChainId.BSC_MAINNET, '0x55d398326f99059fF775485246999027B3197955', 18, 'USDT', 'Tether USD')\n\nexport const T_DAI = new Token(ChainId.BSC_TESTNET, '0xEC5dCb5Dbf4B114C9d0F65BcCAb49EC54F6A0867', 18, 'DAI', 'Dai Token')\nexport const T_BUSD = new Token(ChainId.BSC_TESTNET, '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee', 6, 'BUSD', 'BUSD Token')\nexport const T_USDT = new Token(ChainId.BSC_TESTNET, '0x337610d27c682E347C9cD60BD4b3b107C9d34dDd', 6, 'USDT', 'Tether USD')\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.ROPSTEN]: [WETH[ChainId.ROPSTEN]],\n  [ChainId.RINKEBY]: [WETH[ChainId.RINKEBY]],\n  [ChainId.GÖRLI]: [WETH[ChainId.GÖRLI]],\n  [ChainId.KOVAN]: [WETH[ChainId.KOVAN]],\n  [ChainId.BSC_MAINNET]: [WETH[ChainId.BSC_MAINNET]],\n  [ChainId.BSC_TESTNET]: [WETH[ChainId.BSC_TESTNET]]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT, COMP, MKR],\n  [ChainId.BSC_MAINNET]: [...WETH_ONLY[ChainId.BSC_MAINNET], BAI, B_USDT, BUSD, B_DAI]\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n  }\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT],\n  [ChainId.BSC_MAINNET]: [...WETH_ONLY[ChainId.BSC_MAINNET], BAI, B_USDT, BUSD, B_DAI],\n  [ChainId.BSC_TESTNET]: [...WETH_ONLY[ChainId.BSC_TESTNET], T_USDT, T_BUSD, T_DAI]\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, USDC, USDT],\n  [ChainId.BSC_MAINNET]: [...WETH_ONLY[ChainId.BSC_MAINNET], BAI, B_USDT, BUSD, B_DAI],\n  [ChainId.BSC_TESTNET]: [...WETH_ONLY[ChainId.BSC_TESTNET], T_USDT, T_BUSD, T_DAI]\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [\n      new Token(ChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n      new Token(ChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin')\n    ],\n    [USDC, USDT],\n    [DAI, USDT]\n  ]\n}\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  iconName: string\n  description: string\n  href: string | null\n  color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true\n}\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true\n  },\n  BINANCE: {\n    connector: binanceinjected,\n    name: 'Binance Chain Wallet',\n    iconName: 'bnb.svg',\n    description: 'A Crypto Wallet for Binance Smart Chain',\n    href: null,\n    color: '#F9A825'\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D'\n  },\n  TRUSTWALLET: {\n    connector: injected,\n    name: 'TrustWallet',\n    iconName: 'trustwallet.svg',\n    description: 'The most trusted & secure crypto wallet',\n    href: null,\n    color: '#3375BB'\n  },\n  MATHWALLET: {\n    connector: injected,\n    name: 'MathWallet',\n    iconName: 'mathwallet.svg',\n    description: 'Your Gateway to the World of Blockchain',\n    href: null,\n    color: '#000000'\n  }\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000))\n\n// the Uniswap Default token list lives here\nexport const DEFAULT_TOKEN_LIST_URL = 'https://tokens.bscswap.com/tokens.json'\n"]},"metadata":{},"sourceType":"module"}