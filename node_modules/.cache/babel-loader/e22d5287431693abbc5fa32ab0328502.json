{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addPopup, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nexport function useBlockNumber() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useSelector(state => state.application.blockNumber[chainId !== null && chainId !== void 0 ? chainId : -1]);\n}\nexport function useWalletModalOpen() {\n  return useSelector(state => state.application.walletModalOpen);\n}\nexport function useWalletModalToggle() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\nexport function useSettingsMenuOpen() {\n  return useSelector(state => state.application.settingsMenuOpen);\n}\nexport function useToggleSettingsMenu() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n} // returns a function that allows adding a popup\n\nexport function useAddPopup() {\n  const dispatch = useDispatch();\n  return useCallback((content, key) => {\n    dispatch(addPopup({\n      content,\n      key\n    }));\n  }, [dispatch]);\n} // returns a function that allows removing a popup via its key\n\nexport function useRemovePopup() {\n  const dispatch = useDispatch();\n  return useCallback(key => {\n    dispatch(removePopup({\n      key\n    }));\n  }, [dispatch]);\n} // get the list of active popups\n\nexport function useActivePopups() {\n  const list = useSelector(state => state.application.popupList);\n  return useMemo(() => list.filter(item => item.show), [list]);\n}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/state/application/hooks.ts"],"names":["useCallback","useMemo","useActiveWeb3React","addPopup","removePopup","toggleWalletModal","toggleSettingsMenu","useSelector","useDispatch","useBlockNumber","chainId","state","application","blockNumber","useWalletModalOpen","walletModalOpen","useWalletModalToggle","dispatch","useSettingsMenuOpen","settingsMenuOpen","useToggleSettingsMenu","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,QAAT,EAAiCC,WAAjC,EAA8CC,iBAA9C,EAAiEC,kBAAjE,QAA2F,WAA3F;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,OAAO,SAASC,cAAT,GAA8C;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAcR,kBAAkB,EAAtC;AAEA,SAAOK,WAAW,CAAEI,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBC,WAAlB,CAA8BH,OAA9B,aAA8BA,OAA9B,cAA8BA,OAA9B,GAAyC,CAAC,CAA1C,CAAtB,CAAlB;AACD;AAED,OAAO,SAASI,kBAAT,GAAuC;AAC5C,SAAOP,WAAW,CAAEI,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBG,eAAxC,CAAlB;AACD;AAED,OAAO,SAASC,oBAAT,GAA4C;AACjD,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,SAAOR,WAAW,CAAC,MAAMiB,QAAQ,CAACZ,iBAAiB,EAAlB,CAAf,EAAsC,CAACY,QAAD,CAAtC,CAAlB;AACD;AAED,OAAO,SAASC,mBAAT,GAAwC;AAC7C,SAAOX,WAAW,CAAEI,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBO,gBAAxC,CAAlB;AACD;AAED,OAAO,SAASC,qBAAT,GAA6C;AAClD,QAAMH,QAAQ,GAAGT,WAAW,EAA5B;AACA,SAAOR,WAAW,CAAC,MAAMiB,QAAQ,CAACX,kBAAkB,EAAnB,CAAf,EAAuC,CAACW,QAAD,CAAvC,CAAlB;AACD,C,CAED;;AACA,OAAO,SAASI,WAAT,GAAsE;AAC3E,QAAMJ,QAAQ,GAAGT,WAAW,EAA5B;AAEA,SAAOR,WAAW,CAChB,CAACsB,OAAD,EAAwBC,GAAxB,KAAyC;AACvCN,IAAAA,QAAQ,CAACd,QAAQ,CAAC;AAAEmB,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,CAAT,CAAR;AACD,GAHe,EAIhB,CAACN,QAAD,CAJgB,CAAlB;AAMD,C,CAED;;AACA,OAAO,SAASO,cAAT,GAAiD;AACtD,QAAMP,QAAQ,GAAGT,WAAW,EAA5B;AACA,SAAOR,WAAW,CACfuB,GAAD,IAAiB;AACfN,IAAAA,QAAQ,CAACb,WAAW,CAAC;AAAEmB,MAAAA;AAAF,KAAD,CAAZ,CAAR;AACD,GAHe,EAIhB,CAACN,QAAD,CAJgB,CAAlB;AAMD,C,CAED;;AACA,OAAO,SAASQ,eAAT,GAAiE;AACtE,QAAMC,IAAI,GAAGnB,WAAW,CAAEI,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBe,SAAxC,CAAxB;AACA,SAAO1B,OAAO,CAAC,MAAMyB,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,IAAzB,CAAP,EAAuC,CAACJ,IAAD,CAAvC,CAAd;AACD","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { AppState } from '../index'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen)\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch])\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch])\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter(item => item.show), [list])\n}\n"]},"metadata":{},"sourceType":"module"}