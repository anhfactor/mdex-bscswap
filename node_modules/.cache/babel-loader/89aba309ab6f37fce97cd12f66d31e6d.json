{"ast":null,"code":"import _regeneratorRuntime from\"/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{JSBI,Percent,Router,TradeType}from'@bscswap/sdk';import{useMemo}from'react';import{BIPS_BASE,DEFAULT_DEADLINE_FROM_NOW,INITIAL_ALLOWED_SLIPPAGE}from'../constants';import{getTradeVersion,useV1TradeExchangeAddress}from'../data/V1';import{useTransactionAdder}from'../state/transactions/hooks';import{calculateGasMargin,getRouterContract,isAddress,shortenAddress}from'../utils';import isZero from'../utils/isZero';import v1SwapArguments from'../utils/v1SwapArguments';import{useActiveWeb3React}from'./index';import{useV1ExchangeContract}from'./useContract';import useENS from'./useENS';import{Version}from'./useToggledVersion';export var SwapCallbackState;(function(SwapCallbackState){SwapCallbackState[SwapCallbackState[\"INVALID\"]=0]=\"INVALID\";SwapCallbackState[SwapCallbackState[\"LOADING\"]=1]=\"LOADING\";SwapCallbackState[SwapCallbackState[\"VALID\"]=2]=\"VALID\";})(SwapCallbackState||(SwapCallbackState={}));/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */function useSwapCallArguments(trade){var allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;var deadline=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_DEADLINE_FROM_NOW;var// in seconds from now\nrecipientAddressOrName=arguments.length>3?arguments[3]:undefined;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account,chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var _useENS=useENS(recipientAddressOrName),recipientAddress=_useENS.address;var recipient=recipientAddressOrName===null?account:recipientAddress;var v1Exchange=useV1ExchangeContract(useV1TradeExchangeAddress(trade),true);return useMemo(function(){var tradeVersion=getTradeVersion(trade);if(!trade||!recipient||!library||!account||!tradeVersion||!chainId)return[];var contract=tradeVersion===Version.v2?getRouterContract(chainId,library,account):v1Exchange;if(!contract){return[];}var swapMethods=[];switch(tradeVersion){case Version.v2:swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:false,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,ttl:deadline}));if(trade.tradeType===TradeType.EXACT_INPUT){swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:true,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,ttl:deadline}));}break;case Version.v1:swapMethods.push(v1SwapArguments(trade,{allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,ttl:deadline}));break;}return swapMethods.map(function(parameters){return{parameters:parameters,contract:contract};});},[account,allowedSlippage,chainId,deadline,library,recipient,trade,v1Exchange]);}// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade){var allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;var deadline=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_DEADLINE_FROM_NOW;var// in seconds from now\nrecipientAddressOrName=arguments.length>3?arguments[3]:undefined;var _useActiveWeb3React2=useActiveWeb3React(),account=_useActiveWeb3React2.account,chainId=_useActiveWeb3React2.chainId,library=_useActiveWeb3React2.library;var swapCalls=useSwapCallArguments(trade,allowedSlippage,deadline,recipientAddressOrName);var addTransaction=useTransactionAdder();var _useENS2=useENS(recipientAddressOrName),recipientAddress=_useENS2.address;var recipient=recipientAddressOrName===null?account:recipientAddress;return useMemo(function(){if(!trade||!library||!account||!chainId){return{state:SwapCallbackState.INVALID,callback:null,error:'Missing dependencies'};}if(!recipient){if(recipientAddressOrName!==null){return{state:SwapCallbackState.INVALID,callback:null,error:'Invalid recipient'};}else{return{state:SwapCallbackState.LOADING,callback:null,error:null};}}var tradeVersion=getTradeVersion(trade);return{state:SwapCallbackState.VALID,callback:function(){var _onSwap=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var estimatedCalls,successfulEstimation,errorCalls,_successfulEstimation,contract,_successfulEstimation2,methodName,args,value,gasEstimate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Promise.all(swapCalls.map(function(call){var _contract$estimateGas;var _call$parameters=call.parameters,methodName=_call$parameters.methodName,args=_call$parameters.args,value=_call$parameters.value,contract=call.contract;var options=!value||isZero(value)?{}:{value:value};return(_contract$estimateGas=contract.estimateGas)[methodName].apply(_contract$estimateGas,_toConsumableArray(args).concat([options])).then(function(gasEstimate){return{call:call,gasEstimate:gasEstimate};}).catch(function(gasError){var _contract$callStatic;console.debug('Gas estimate failed, trying eth_call to extract error',call);return(_contract$callStatic=contract.callStatic)[methodName].apply(_contract$callStatic,_toConsumableArray(args).concat([options])).then(function(result){console.debug('Unexpected successful call after failed estimate gas',call,gasError,result);return{call:call,error:new Error('Unexpected issue with estimating the gas. Please try again.')};}).catch(function(callError){console.debug('Call threw error',call,callError);var errorMessage;switch(callError.reason){case'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':case'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':errorMessage='This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';break;default:errorMessage=\"The transaction cannot succeed due to error: \".concat(callError.reason,\". This is probably an issue with one of the tokens you are swapping.\");}return{call:call,error:new Error(errorMessage)};});});}));case 2:estimatedCalls=_context.sent;// a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\nsuccessfulEstimation=estimatedCalls.find(function(el,ix,list){return'gasEstimate'in el&&(ix===list.length-1||'gasEstimate'in list[ix+1]);});if(successfulEstimation){_context.next=9;break;}errorCalls=estimatedCalls.filter(function(call){return'error'in call;});if(!(errorCalls.length>0)){_context.next=8;break;}throw errorCalls[errorCalls.length-1].error;case 8:throw new Error('Unexpected error. Please contact support: none of the calls threw an error');case 9:_successfulEstimation=successfulEstimation.call,contract=_successfulEstimation.contract,_successfulEstimation2=_successfulEstimation.parameters,methodName=_successfulEstimation2.methodName,args=_successfulEstimation2.args,value=_successfulEstimation2.value,gasEstimate=successfulEstimation.gasEstimate;return _context.abrupt(\"return\",contract[methodName].apply(contract,_toConsumableArray(args).concat([_objectSpread({gasLimit:calculateGasMargin(gasEstimate)},value&&!isZero(value)?{value:value,from:account}:{from:account})])).then(function(response){var inputSymbol=trade.inputAmount.currency.symbol;var outputSymbol=trade.outputAmount.currency.symbol;var inputAmount=trade.inputAmount.toSignificant(3);var outputAmount=trade.outputAmount.toSignificant(3);var base=\"Swap \".concat(inputAmount,\" \").concat(inputSymbol,\" for \").concat(outputAmount,\" \").concat(outputSymbol);var withRecipient=recipient===account?base:\"\".concat(base,\" to \").concat(recipientAddressOrName&&isAddress(recipientAddressOrName)?shortenAddress(recipientAddressOrName):recipientAddressOrName);var withVersion=tradeVersion===Version.v2?withRecipient:\"\".concat(withRecipient,\" on \").concat(tradeVersion.toUpperCase());addTransaction(response,{summary:withVersion});return response.hash;}).catch(function(error){// if the user rejected the tx, pass this along\nif((error===null||error===void 0?void 0:error.code)===4001){throw new Error('Transaction rejected.');}else{// otherwise, the error was unexpected and we need to convey that\nconsole.error(\"Swap failed\",error,methodName,args,value);throw new Error(\"Swap failed: \".concat(error.message));}}));case 11:case\"end\":return _context.stop();}}},_callee);}));function onSwap(){return _onSwap.apply(this,arguments);}return onSwap;}(),error:null};},[trade,library,account,chainId,recipient,recipientAddressOrName,swapCalls,addTransaction]);}","map":{"version":3,"sources":["/Users/lap14205/Documents/home/blockchain_learning/mdex-bscswap/src/hooks/useSwapCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useV1TradeExchangeAddress","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","v1SwapArguments","useActiveWeb3React","useV1ExchangeContract","useENS","Version","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","deadline","recipientAddressOrName","account","chainId","library","recipientAddress","address","recipient","v1Exchange","tradeVersion","contract","v2","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","ttl","tradeType","EXACT_INPUT","v1","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","estimatedCalls","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","withVersion","toUpperCase","summary","hash","code","message","onSwap"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@bscswap/sdk'\nimport { useMemo } from 'react'\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport v1SwapArguments from '../utils/v1SwapArguments'\nimport { useActiveWeb3React } from './index'\nimport { useV1ExchangeContract } from './useContract'\nimport useENS from './useENS'\nimport { Version } from './useToggledVersion'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true)\n\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade)\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId) return []\n\n    const contract: Contract | null =\n      tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          })\n        )\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n              recipient,\n              ttl: deadline\n            })\n          )\n        }\n        break\n      case Version.v1:\n        swapMethods.push(\n          v1SwapArguments(trade, {\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          })\n        )\n        break\n    }\n    return swapMethods.map(parameters => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      } else {\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\n      }\n    }\n\n    const tradeVersion = getTradeVersion(trade)\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map(call => {\n            const {\n              parameters: { methodName, args, value },\n              contract\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then(gasEstimate => {\n                return {\n                  call,\n                  gasEstimate\n                }\n              })\n              .catch(gasError => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then(result => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch(callError => {\n                    console.debug('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value }\n          },\n          gasEstimate\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? { value, from: account } : { from: account })\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            const withVersion =\n              tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`\n\n            addTransaction(response, {\n              summary: withVersion\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\n}\n"]},"metadata":{},"sourceType":"module"}